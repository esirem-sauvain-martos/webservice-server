/* soapClient.cpp
   Generated by gSOAP 2.8.98 for networkManagement.hpp

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.98 2020-03-21 19:15:26 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_cpu_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &info)
{	if (soap_send_ns__get_cpu_info(soap, soap_endpoint, soap_action) || soap_recv_ns__get_cpu_info(soap, info))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_cpu_info(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_cpu_info soap_tmp_ns__get_cpu_info;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info, "ns:get-cpu-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info, "ns:get-cpu-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_cpu_info(struct soap *soap, std::string &info)
{
	struct ns__get_cpu_infoResponse *soap_tmp_ns__get_cpu_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_cpu_infoResponse = soap_get_ns__get_cpu_infoResponse(soap, NULL, "ns:get-cpu-infoResponse", NULL);
	if (!soap_tmp_ns__get_cpu_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_cpu_infoResponse->info;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_cpu_usage(struct soap *soap, const char *soap_endpoint, const char *soap_action, float &usage)
{	if (soap_send_ns__get_cpu_usage(soap, soap_endpoint, soap_action) || soap_recv_ns__get_cpu_usage(soap, usage))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_cpu_usage(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_cpu_usage soap_tmp_ns__get_cpu_usage;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage, "ns:get-cpu-usage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage, "ns:get-cpu-usage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_cpu_usage(struct soap *soap, float &usage)
{
	struct ns__get_cpu_usageResponse *soap_tmp_ns__get_cpu_usageResponse;
	soap_default_float(soap, &usage);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_cpu_usageResponse = soap_get_ns__get_cpu_usageResponse(soap, NULL, "ns:get-cpu-usageResponse", NULL);
	if (!soap_tmp_ns__get_cpu_usageResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	usage = soap_tmp_ns__get_cpu_usageResponse->usage;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_memory_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &info)
{	if (soap_send_ns__get_memory_info(soap, soap_endpoint, soap_action) || soap_recv_ns__get_memory_info(soap, info))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_memory_info(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_memory_info soap_tmp_ns__get_memory_info;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info, "ns:get-memory-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info, "ns:get-memory-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_memory_info(struct soap *soap, std::string &info)
{
	struct ns__get_memory_infoResponse *soap_tmp_ns__get_memory_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_memory_infoResponse = soap_get_ns__get_memory_infoResponse(soap, NULL, "ns:get-memory-infoResponse", NULL);
	if (!soap_tmp_ns__get_memory_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_memory_infoResponse->info;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_memory_available(struct soap *soap, const char *soap_endpoint, const char *soap_action, float &available)
{	if (soap_send_ns__get_memory_available(soap, soap_endpoint, soap_action) || soap_recv_ns__get_memory_available(soap, available))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_memory_available(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_memory_available soap_tmp_ns__get_memory_available;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available, "ns:get-memory-available", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available, "ns:get-memory-available", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_memory_available(struct soap *soap, float &available)
{
	struct ns__get_memory_availableResponse *soap_tmp_ns__get_memory_availableResponse;
	soap_default_float(soap, &available);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_memory_availableResponse = soap_get_ns__get_memory_availableResponse(soap, NULL, "ns:get-memory-availableResponse", NULL);
	if (!soap_tmp_ns__get_memory_availableResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	available = soap_tmp_ns__get_memory_availableResponse->available;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_memory_free(struct soap *soap, const char *soap_endpoint, const char *soap_action, float &free)
{	if (soap_send_ns__get_memory_free(soap, soap_endpoint, soap_action) || soap_recv_ns__get_memory_free(soap, free))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_memory_free(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_memory_free soap_tmp_ns__get_memory_free;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free, "ns:get-memory-free", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free, "ns:get-memory-free", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_memory_free(struct soap *soap, float &free)
{
	struct ns__get_memory_freeResponse *soap_tmp_ns__get_memory_freeResponse;
	soap_default_float(soap, &free);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_memory_freeResponse = soap_get_ns__get_memory_freeResponse(soap, NULL, "ns:get-memory-freeResponse", NULL);
	if (!soap_tmp_ns__get_memory_freeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	free = soap_tmp_ns__get_memory_freeResponse->free;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_drive_number(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int &number)
{	if (soap_send_ns__get_drive_number(soap, soap_endpoint, soap_action) || soap_recv_ns__get_drive_number(soap, number))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_drive_number(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_drive_number soap_tmp_ns__get_drive_number;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number, "ns:get-drive-number", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number, "ns:get-drive-number", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_drive_number(struct soap *soap, unsigned int &number)
{
	struct ns__get_drive_numberResponse *soap_tmp_ns__get_drive_numberResponse;
	soap_default_unsignedInt(soap, &number);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_drive_numberResponse = soap_get_ns__get_drive_numberResponse(soap, NULL, "ns:get-drive-numberResponse", NULL);
	if (!soap_tmp_ns__get_drive_numberResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	number = soap_tmp_ns__get_drive_numberResponse->number;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_drive_names(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string *names)
{	if (soap_send_ns__get_drive_names(soap, soap_endpoint, soap_action) || soap_recv_ns__get_drive_names(soap, names))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_drive_names(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_drive_names soap_tmp_ns__get_drive_names;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names, "ns:get-drive-names", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names, "ns:get-drive-names", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_drive_names(struct soap *soap, std::string *names)
{
	struct ns__get_drive_namesResponse *soap_tmp_ns__get_drive_namesResponse;
	if (!names)
		return soap_closesock(soap);
	soap_default_std__string(soap, names);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_drive_namesResponse = soap_get_ns__get_drive_namesResponse(soap, NULL, "ns:get-drive-namesResponse", NULL);
	if (!soap_tmp_ns__get_drive_namesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (names && soap_tmp_ns__get_drive_namesResponse->names)
		*names = *soap_tmp_ns__get_drive_namesResponse->names;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_drive_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, std::string &info)
{	if (soap_send_ns__get_drive_info(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_drive_info(soap, info))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_drive_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_drive_info soap_tmp_ns__get_drive_info;
	soap_tmp_ns__get_drive_info.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info, "ns:get-drive-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info, "ns:get-drive-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_drive_info(struct soap *soap, std::string &info)
{
	struct ns__get_drive_infoResponse *soap_tmp_ns__get_drive_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_drive_infoResponse = soap_get_ns__get_drive_infoResponse(soap, NULL, "ns:get-drive-infoResponse", NULL);
	if (!soap_tmp_ns__get_drive_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_drive_infoResponse->info;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_drive_total_capacity(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, float &total)
{	if (soap_send_ns__get_drive_total_capacity(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_drive_total_capacity(soap, total))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_drive_total_capacity(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_drive_total_capacity soap_tmp_ns__get_drive_total_capacity;
	soap_tmp_ns__get_drive_total_capacity.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity, "ns:get-drive-total-capacity", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity, "ns:get-drive-total-capacity", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_drive_total_capacity(struct soap *soap, float &total)
{
	struct ns__get_drive_total_capacityResponse *soap_tmp_ns__get_drive_total_capacityResponse;
	soap_default_float(soap, &total);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_drive_total_capacityResponse = soap_get_ns__get_drive_total_capacityResponse(soap, NULL, "ns:get-drive-total-capacityResponse", NULL);
	if (!soap_tmp_ns__get_drive_total_capacityResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	total = soap_tmp_ns__get_drive_total_capacityResponse->total;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_drive_used_capatity(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, float &usage)
{	if (soap_send_ns__get_drive_used_capatity(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_drive_used_capatity(soap, usage))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_drive_used_capatity(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_drive_used_capatity soap_tmp_ns__get_drive_used_capatity;
	soap_tmp_ns__get_drive_used_capatity.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity, "ns:get-drive-used-capatity", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity, "ns:get-drive-used-capatity", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_drive_used_capatity(struct soap *soap, float &usage)
{
	struct ns__get_drive_used_capatityResponse *soap_tmp_ns__get_drive_used_capatityResponse;
	soap_default_float(soap, &usage);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_drive_used_capatityResponse = soap_get_ns__get_drive_used_capatityResponse(soap, NULL, "ns:get-drive-used-capatityResponse", NULL);
	if (!soap_tmp_ns__get_drive_used_capatityResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	usage = soap_tmp_ns__get_drive_used_capatityResponse->usage;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_interface_number(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int &number)
{	if (soap_send_ns__get_interface_number(soap, soap_endpoint, soap_action) || soap_recv_ns__get_interface_number(soap, number))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_interface_number(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_interface_number soap_tmp_ns__get_interface_number;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number, "ns:get-interface-number", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number, "ns:get-interface-number", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_interface_number(struct soap *soap, unsigned int &number)
{
	struct ns__get_interface_numberResponse *soap_tmp_ns__get_interface_numberResponse;
	soap_default_unsignedInt(soap, &number);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_interface_numberResponse = soap_get_ns__get_interface_numberResponse(soap, NULL, "ns:get-interface-numberResponse", NULL);
	if (!soap_tmp_ns__get_interface_numberResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	number = soap_tmp_ns__get_interface_numberResponse->number;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_interface_names(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string *names)
{	if (soap_send_ns__get_interface_names(soap, soap_endpoint, soap_action) || soap_recv_ns__get_interface_names(soap, names))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_interface_names(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns__get_interface_names soap_tmp_ns__get_interface_names;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names, "ns:get-interface-names", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names, "ns:get-interface-names", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_interface_names(struct soap *soap, std::string *names)
{
	struct ns__get_interface_namesResponse *soap_tmp_ns__get_interface_namesResponse;
	if (!names)
		return soap_closesock(soap);
	soap_default_std__string(soap, names);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_interface_namesResponse = soap_get_ns__get_interface_namesResponse(soap, NULL, "ns:get-interface-namesResponse", NULL);
	if (!soap_tmp_ns__get_interface_namesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (names && soap_tmp_ns__get_interface_namesResponse->names)
		*names = *soap_tmp_ns__get_interface_namesResponse->names;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_interface_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, std::string &info)
{	if (soap_send_ns__get_interface_info(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_interface_info(soap, info))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_interface_info(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_interface_info soap_tmp_ns__get_interface_info;
	soap_tmp_ns__get_interface_info.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info, "ns:get-interface-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info, "ns:get-interface-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_interface_info(struct soap *soap, std::string &info)
{
	struct ns__get_interface_infoResponse *soap_tmp_ns__get_interface_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_interface_infoResponse = soap_get_ns__get_interface_infoResponse(soap, NULL, "ns:get-interface-infoResponse", NULL);
	if (!soap_tmp_ns__get_interface_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_interface_infoResponse->info;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_interface_ip_address(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, std::string &ip_address)
{	if (soap_send_ns__get_interface_ip_address(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_interface_ip_address(soap, ip_address))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_interface_ip_address(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_interface_ip_address soap_tmp_ns__get_interface_ip_address;
	soap_tmp_ns__get_interface_ip_address.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address, "ns:get-interface-ip-address", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address, "ns:get-interface-ip-address", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_interface_ip_address(struct soap *soap, std::string &ip_address)
{
	struct ns__get_interface_ip_addressResponse *soap_tmp_ns__get_interface_ip_addressResponse;
	soap_default_std__string(soap, &ip_address);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_interface_ip_addressResponse = soap_get_ns__get_interface_ip_addressResponse(soap, NULL, "ns:get-interface-ip-addressResponse", NULL);
	if (!soap_tmp_ns__get_interface_ip_addressResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ip_address = soap_tmp_ns__get_interface_ip_addressResponse->ip_address;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__get_interface_speed(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, int &speed)
{	if (soap_send_ns__get_interface_speed(soap, soap_endpoint, soap_action, name) || soap_recv_ns__get_interface_speed(soap, speed))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__get_interface_speed(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name)
{	struct ns__get_interface_speed soap_tmp_ns__get_interface_speed;
	soap_tmp_ns__get_interface_speed.name = name;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed, "ns:get-interface-speed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed, "ns:get-interface-speed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__get_interface_speed(struct soap *soap, int &speed)
{
	struct ns__get_interface_speedResponse *soap_tmp_ns__get_interface_speedResponse;
	soap_default_int(soap, &speed);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__get_interface_speedResponse = soap_get_ns__get_interface_speedResponse(soap, NULL, "ns:get-interface-speedResponse", NULL);
	if (!soap_tmp_ns__get_interface_speedResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	speed = soap_tmp_ns__get_interface_speedResponse->speed;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__set_hostname(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& hostname)
{	struct ns__set_hostname soap_tmp_ns__set_hostname;
	soap_tmp_ns__set_hostname.hostname = hostname;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__set_hostname(soap, &soap_tmp_ns__set_hostname);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__set_hostname(soap, &soap_tmp_ns__set_hostname, "ns:set-hostname", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__set_hostname(soap, &soap_tmp_ns__set_hostname, "ns:set-hostname", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__set_hostname(struct soap *soap, struct ns__set_hostname *_param_1)
{
	soap_default_ns__set_hostname(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__set_hostname(soap, _param_1, "ns:set-hostname", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns__set_interface_ip_address(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::string& name, const std::string& ip_address, const std::string& subnet_mask)
{	struct ns__set_interface_ip_address soap_tmp_ns__set_interface_ip_address;
	soap_tmp_ns__set_interface_ip_address.name = name;
	soap_tmp_ns__set_interface_ip_address.ip_address = ip_address;
	soap_tmp_ns__set_interface_ip_address.subnet_mask = subnet_mask;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address, "ns:set-interface-ip-address", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address, "ns:set-interface-ip-address", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns__set_interface_ip_address(struct soap *soap, struct ns__set_interface_ip_address *_param_1)
{
	soap_default_ns__set_interface_ip_address(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__set_interface_ip_address(soap, _param_1, "ns:set-interface-ip-address", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
