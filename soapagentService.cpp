/* soapagentService.cpp
   Generated by gSOAP 2.8.98 for soapAgentServer.hpp

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapagentService.h"

agentService::agentService()
{	this->soap = soap_new();
	this->soap_own = true;
	agentService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

agentService::agentService(const agentService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

agentService::agentService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	agentService_init(_soap->imode, _soap->omode);
}

agentService::agentService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	agentService_init(iomode, iomode);
}

agentService::agentService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	agentService_init(imode, omode);
}

agentService::~agentService()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void agentService::agentService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns", "http://tempuri.org/ns.xsd", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void agentService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void agentService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	agentService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
agentService *agentService::copy()
{	agentService *dup = SOAP_NEW_UNMANAGED(agentService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

agentService& agentService::operator=(const agentService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int agentService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int agentService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int agentService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int agentService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int agentService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int agentService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void agentService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void agentService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *agentService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void agentService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *agentService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int agentService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int agentService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET agentService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET agentService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int agentService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int agentService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__get_cpu_info(struct soap*, agentService*);
static int serve_ns__get_cpu_usage(struct soap*, agentService*);
static int serve_ns__get_memory_info(struct soap*, agentService*);
static int serve_ns__get_memory_available(struct soap*, agentService*);
static int serve_ns__get_memory_free(struct soap*, agentService*);
static int serve_ns__get_drive_number(struct soap*, agentService*);
static int serve_ns__get_drive_names(struct soap*, agentService*);
static int serve_ns__get_drive_info(struct soap*, agentService*);
static int serve_ns__get_drive_total_capacity(struct soap*, agentService*);
static int serve_ns__get_drive_used_capatity(struct soap*, agentService*);
static int serve_ns__get_interface_number(struct soap*, agentService*);
static int serve_ns__get_interface_names(struct soap*, agentService*);
static int serve_ns__get_interface_info(struct soap*, agentService*);
static int serve_ns__get_interface_ip_address(struct soap*, agentService*);
static int serve_ns__get_interface_speed(struct soap*, agentService*);
static int serve_ns__set_hostname(struct soap*, agentService*);
static int serve_ns__set_interface_ip_address(struct soap*, agentService*);

int agentService::dispatch()
{	return dispatch(this->soap);
}

int agentService::dispatch(struct soap* soap)
{
	agentService_init(soap->imode, soap->omode);
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:get-cpu-info"))
		return serve_ns__get_cpu_info(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-cpu-usage"))
		return serve_ns__get_cpu_usage(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-memory-info"))
		return serve_ns__get_memory_info(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-memory-available"))
		return serve_ns__get_memory_available(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-memory-free"))
		return serve_ns__get_memory_free(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-drive-number"))
		return serve_ns__get_drive_number(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-drive-names"))
		return serve_ns__get_drive_names(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-drive-info"))
		return serve_ns__get_drive_info(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-drive-total-capacity"))
		return serve_ns__get_drive_total_capacity(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-drive-used-capatity"))
		return serve_ns__get_drive_used_capatity(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-interface-number"))
		return serve_ns__get_interface_number(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-interface-names"))
		return serve_ns__get_interface_names(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-interface-info"))
		return serve_ns__get_interface_info(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-interface-ip-address"))
		return serve_ns__get_interface_ip_address(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:get-interface-speed"))
		return serve_ns__get_interface_speed(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:set-hostname"))
		return serve_ns__set_hostname(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns:set-interface-ip-address"))
		return serve_ns__set_interface_ip_address(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve_ns__get_cpu_info(struct soap *soap, agentService *service)
{	struct ns__get_cpu_info soap_tmp_ns__get_cpu_info;
	struct ns__get_cpu_infoResponse soap_tmp_ns__get_cpu_infoResponse;
	soap_default_ns__get_cpu_infoResponse(soap, &soap_tmp_ns__get_cpu_infoResponse);
	soap_default_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info);
	if (!soap_get_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info, "ns:get-cpu-info", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_cpu_info(soap_tmp_ns__get_cpu_infoResponse.info);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_infoResponse(soap, &soap_tmp_ns__get_cpu_infoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_infoResponse(soap, &soap_tmp_ns__get_cpu_infoResponse, "ns:get-cpu-infoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_infoResponse(soap, &soap_tmp_ns__get_cpu_infoResponse, "ns:get-cpu-infoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_cpu_usage(struct soap *soap, agentService *service)
{	struct ns__get_cpu_usage soap_tmp_ns__get_cpu_usage;
	struct ns__get_cpu_usageResponse soap_tmp_ns__get_cpu_usageResponse;
	soap_default_ns__get_cpu_usageResponse(soap, &soap_tmp_ns__get_cpu_usageResponse);
	soap_default_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage);
	if (!soap_get_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage, "ns:get-cpu-usage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_cpu_usage(soap_tmp_ns__get_cpu_usageResponse.usage);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_usageResponse(soap, &soap_tmp_ns__get_cpu_usageResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_usageResponse(soap, &soap_tmp_ns__get_cpu_usageResponse, "ns:get-cpu-usageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_usageResponse(soap, &soap_tmp_ns__get_cpu_usageResponse, "ns:get-cpu-usageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_memory_info(struct soap *soap, agentService *service)
{	struct ns__get_memory_info soap_tmp_ns__get_memory_info;
	struct ns__get_memory_infoResponse soap_tmp_ns__get_memory_infoResponse;
	soap_default_ns__get_memory_infoResponse(soap, &soap_tmp_ns__get_memory_infoResponse);
	soap_default_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info);
	if (!soap_get_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info, "ns:get-memory-info", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_memory_info(soap_tmp_ns__get_memory_infoResponse.info);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_infoResponse(soap, &soap_tmp_ns__get_memory_infoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_infoResponse(soap, &soap_tmp_ns__get_memory_infoResponse, "ns:get-memory-infoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_infoResponse(soap, &soap_tmp_ns__get_memory_infoResponse, "ns:get-memory-infoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_memory_available(struct soap *soap, agentService *service)
{	struct ns__get_memory_available soap_tmp_ns__get_memory_available;
	struct ns__get_memory_availableResponse soap_tmp_ns__get_memory_availableResponse;
	soap_default_ns__get_memory_availableResponse(soap, &soap_tmp_ns__get_memory_availableResponse);
	soap_default_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available);
	if (!soap_get_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available, "ns:get-memory-available", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_memory_available(soap_tmp_ns__get_memory_availableResponse.available);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_availableResponse(soap, &soap_tmp_ns__get_memory_availableResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_availableResponse(soap, &soap_tmp_ns__get_memory_availableResponse, "ns:get-memory-availableResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_availableResponse(soap, &soap_tmp_ns__get_memory_availableResponse, "ns:get-memory-availableResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_memory_free(struct soap *soap, agentService *service)
{	struct ns__get_memory_free soap_tmp_ns__get_memory_free;
	struct ns__get_memory_freeResponse soap_tmp_ns__get_memory_freeResponse;
	soap_default_ns__get_memory_freeResponse(soap, &soap_tmp_ns__get_memory_freeResponse);
	soap_default_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free);
	if (!soap_get_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free, "ns:get-memory-free", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_memory_free(soap_tmp_ns__get_memory_freeResponse.free);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_freeResponse(soap, &soap_tmp_ns__get_memory_freeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_freeResponse(soap, &soap_tmp_ns__get_memory_freeResponse, "ns:get-memory-freeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_freeResponse(soap, &soap_tmp_ns__get_memory_freeResponse, "ns:get-memory-freeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_drive_number(struct soap *soap, agentService *service)
{	struct ns__get_drive_number soap_tmp_ns__get_drive_number;
	struct ns__get_drive_numberResponse soap_tmp_ns__get_drive_numberResponse;
	soap_default_ns__get_drive_numberResponse(soap, &soap_tmp_ns__get_drive_numberResponse);
	soap_default_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number);
	if (!soap_get_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number, "ns:get-drive-number", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_drive_number(soap_tmp_ns__get_drive_numberResponse.number);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_numberResponse(soap, &soap_tmp_ns__get_drive_numberResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_numberResponse(soap, &soap_tmp_ns__get_drive_numberResponse, "ns:get-drive-numberResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_numberResponse(soap, &soap_tmp_ns__get_drive_numberResponse, "ns:get-drive-numberResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_drive_names(struct soap *soap, agentService *service)
{	struct ns__get_drive_names soap_tmp_ns__get_drive_names;
	struct ns__get_drive_namesResponse soap_tmp_ns__get_drive_namesResponse;
	std::string soap_tmp_std__string;
	soap_default_ns__get_drive_namesResponse(soap, &soap_tmp_ns__get_drive_namesResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_ns__get_drive_namesResponse.names = &soap_tmp_std__string;
	soap_default_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names);
	if (!soap_get_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names, "ns:get-drive-names", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_drive_names(soap_tmp_ns__get_drive_namesResponse.names);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_namesResponse(soap, &soap_tmp_ns__get_drive_namesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_namesResponse(soap, &soap_tmp_ns__get_drive_namesResponse, "ns:get-drive-namesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_namesResponse(soap, &soap_tmp_ns__get_drive_namesResponse, "ns:get-drive-namesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_drive_info(struct soap *soap, agentService *service)
{	struct ns__get_drive_info soap_tmp_ns__get_drive_info;
	struct ns__get_drive_infoResponse soap_tmp_ns__get_drive_infoResponse;
	soap_default_ns__get_drive_infoResponse(soap, &soap_tmp_ns__get_drive_infoResponse);
	soap_default_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info);
	if (!soap_get_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info, "ns:get-drive-info", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_drive_info(soap_tmp_ns__get_drive_info.name, soap_tmp_ns__get_drive_infoResponse.info);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_infoResponse(soap, &soap_tmp_ns__get_drive_infoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_infoResponse(soap, &soap_tmp_ns__get_drive_infoResponse, "ns:get-drive-infoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_infoResponse(soap, &soap_tmp_ns__get_drive_infoResponse, "ns:get-drive-infoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_drive_total_capacity(struct soap *soap, agentService *service)
{	struct ns__get_drive_total_capacity soap_tmp_ns__get_drive_total_capacity;
	struct ns__get_drive_total_capacityResponse soap_tmp_ns__get_drive_total_capacityResponse;
	soap_default_ns__get_drive_total_capacityResponse(soap, &soap_tmp_ns__get_drive_total_capacityResponse);
	soap_default_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity);
	if (!soap_get_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity, "ns:get-drive-total-capacity", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_drive_total_capacity(soap_tmp_ns__get_drive_total_capacity.name, soap_tmp_ns__get_drive_total_capacityResponse.total);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_total_capacityResponse(soap, &soap_tmp_ns__get_drive_total_capacityResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_total_capacityResponse(soap, &soap_tmp_ns__get_drive_total_capacityResponse, "ns:get-drive-total-capacityResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_total_capacityResponse(soap, &soap_tmp_ns__get_drive_total_capacityResponse, "ns:get-drive-total-capacityResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_drive_used_capatity(struct soap *soap, agentService *service)
{	struct ns__get_drive_used_capatity soap_tmp_ns__get_drive_used_capatity;
	struct ns__get_drive_used_capatityResponse soap_tmp_ns__get_drive_used_capatityResponse;
	soap_default_ns__get_drive_used_capatityResponse(soap, &soap_tmp_ns__get_drive_used_capatityResponse);
	soap_default_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity);
	if (!soap_get_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity, "ns:get-drive-used-capatity", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_drive_used_capatity(soap_tmp_ns__get_drive_used_capatity.name, soap_tmp_ns__get_drive_used_capatityResponse.usage);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_used_capatityResponse(soap, &soap_tmp_ns__get_drive_used_capatityResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_used_capatityResponse(soap, &soap_tmp_ns__get_drive_used_capatityResponse, "ns:get-drive-used-capatityResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_used_capatityResponse(soap, &soap_tmp_ns__get_drive_used_capatityResponse, "ns:get-drive-used-capatityResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_interface_number(struct soap *soap, agentService *service)
{	struct ns__get_interface_number soap_tmp_ns__get_interface_number;
	struct ns__get_interface_numberResponse soap_tmp_ns__get_interface_numberResponse;
	soap_default_ns__get_interface_numberResponse(soap, &soap_tmp_ns__get_interface_numberResponse);
	soap_default_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number);
	if (!soap_get_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number, "ns:get-interface-number", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_interface_number(soap_tmp_ns__get_interface_numberResponse.number);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_numberResponse(soap, &soap_tmp_ns__get_interface_numberResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_numberResponse(soap, &soap_tmp_ns__get_interface_numberResponse, "ns:get-interface-numberResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_numberResponse(soap, &soap_tmp_ns__get_interface_numberResponse, "ns:get-interface-numberResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_interface_names(struct soap *soap, agentService *service)
{	struct ns__get_interface_names soap_tmp_ns__get_interface_names;
	struct ns__get_interface_namesResponse soap_tmp_ns__get_interface_namesResponse;
	std::string soap_tmp_std__string;
	soap_default_ns__get_interface_namesResponse(soap, &soap_tmp_ns__get_interface_namesResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_ns__get_interface_namesResponse.names = &soap_tmp_std__string;
	soap_default_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names);
	if (!soap_get_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names, "ns:get-interface-names", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_interface_names(soap_tmp_ns__get_interface_namesResponse.names);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_namesResponse(soap, &soap_tmp_ns__get_interface_namesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_namesResponse(soap, &soap_tmp_ns__get_interface_namesResponse, "ns:get-interface-namesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_namesResponse(soap, &soap_tmp_ns__get_interface_namesResponse, "ns:get-interface-namesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_interface_info(struct soap *soap, agentService *service)
{	struct ns__get_interface_info soap_tmp_ns__get_interface_info;
	struct ns__get_interface_infoResponse soap_tmp_ns__get_interface_infoResponse;
	soap_default_ns__get_interface_infoResponse(soap, &soap_tmp_ns__get_interface_infoResponse);
	soap_default_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info);
	if (!soap_get_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info, "ns:get-interface-info", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_interface_info(soap_tmp_ns__get_interface_info.name, soap_tmp_ns__get_interface_infoResponse.info);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_infoResponse(soap, &soap_tmp_ns__get_interface_infoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_infoResponse(soap, &soap_tmp_ns__get_interface_infoResponse, "ns:get-interface-infoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_infoResponse(soap, &soap_tmp_ns__get_interface_infoResponse, "ns:get-interface-infoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_interface_ip_address(struct soap *soap, agentService *service)
{	struct ns__get_interface_ip_address soap_tmp_ns__get_interface_ip_address;
	struct ns__get_interface_ip_addressResponse soap_tmp_ns__get_interface_ip_addressResponse;
	soap_default_ns__get_interface_ip_addressResponse(soap, &soap_tmp_ns__get_interface_ip_addressResponse);
	soap_default_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address);
	if (!soap_get_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address, "ns:get-interface-ip-address", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_interface_ip_address(soap_tmp_ns__get_interface_ip_address.name, soap_tmp_ns__get_interface_ip_addressResponse.ip_address);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_ip_addressResponse(soap, &soap_tmp_ns__get_interface_ip_addressResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_ip_addressResponse(soap, &soap_tmp_ns__get_interface_ip_addressResponse, "ns:get-interface-ip-addressResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_ip_addressResponse(soap, &soap_tmp_ns__get_interface_ip_addressResponse, "ns:get-interface-ip-addressResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_interface_speed(struct soap *soap, agentService *service)
{	struct ns__get_interface_speed soap_tmp_ns__get_interface_speed;
	struct ns__get_interface_speedResponse soap_tmp_ns__get_interface_speedResponse;
	soap_default_ns__get_interface_speedResponse(soap, &soap_tmp_ns__get_interface_speedResponse);
	soap_default_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed);
	if (!soap_get_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed, "ns:get-interface-speed", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_interface_speed(soap_tmp_ns__get_interface_speed.name, soap_tmp_ns__get_interface_speedResponse.speed);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_speedResponse(soap, &soap_tmp_ns__get_interface_speedResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_speedResponse(soap, &soap_tmp_ns__get_interface_speedResponse, "ns:get-interface-speedResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_speedResponse(soap, &soap_tmp_ns__get_interface_speedResponse, "ns:get-interface-speedResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__set_hostname(struct soap *soap, agentService *service)
{	struct ns__set_hostname soap_tmp_ns__set_hostname;
	soap_default_ns__set_hostname(soap, &soap_tmp_ns__set_hostname);
	if (!soap_get_ns__set_hostname(soap, &soap_tmp_ns__set_hostname, "ns:set-hostname", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->set_hostname(soap_tmp_ns__set_hostname.hostname);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__set_interface_ip_address(struct soap *soap, agentService *service)
{	struct ns__set_interface_ip_address soap_tmp_ns__set_interface_ip_address;
	soap_default_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address);
	if (!soap_get_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address, "ns:set-interface-ip-address", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->set_interface_ip_address(soap_tmp_ns__set_interface_ip_address.name, soap_tmp_ns__set_interface_ip_address.ip_address, soap_tmp_ns__set_interface_ip_address.subnet_mask);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
