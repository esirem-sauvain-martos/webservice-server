/* soapH.h
   Generated by gSOAP 2.8.98 for networkManagement.hpp

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns__set_interface_ip_address_DEFINED
#define SOAP_TYPE_ns__set_interface_ip_address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__set_interface_ip_address(struct soap*, struct ns__set_interface_ip_address *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__set_interface_ip_address(struct soap*, const struct ns__set_interface_ip_address *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__set_interface_ip_address(struct soap*, const char*, int, const struct ns__set_interface_ip_address *, const char*);
SOAP_FMAC3 struct ns__set_interface_ip_address * SOAP_FMAC4 soap_in_ns__set_interface_ip_address(struct soap*, const char*, struct ns__set_interface_ip_address *, const char*);
SOAP_FMAC1 struct ns__set_interface_ip_address * SOAP_FMAC2 soap_instantiate_ns__set_interface_ip_address(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__set_interface_ip_address * soap_new_ns__set_interface_ip_address(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__set_interface_ip_address(soap, n, NULL, NULL, NULL);
}

inline struct ns__set_interface_ip_address * soap_new_req_ns__set_interface_ip_address(
	struct soap *soap,
	const std::string& name,
	const std::string& ip_address,
	const std::string& subnet_mask)
{
	struct ns__set_interface_ip_address *_p = ::soap_new_ns__set_interface_ip_address(soap);
	if (_p)
	{	::soap_default_ns__set_interface_ip_address(soap, _p);
		_p->name = name;
		_p->ip_address = ip_address;
		_p->subnet_mask = subnet_mask;
	}
	return _p;
}

inline struct ns__set_interface_ip_address * soap_new_set_ns__set_interface_ip_address(
	struct soap *soap,
	const std::string& name,
	const std::string& ip_address,
	const std::string& subnet_mask)
{
	struct ns__set_interface_ip_address *_p = ::soap_new_ns__set_interface_ip_address(soap);
	if (_p)
	{	::soap_default_ns__set_interface_ip_address(soap, _p);
		_p->name = name;
		_p->ip_address = ip_address;
		_p->subnet_mask = subnet_mask;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__set_interface_ip_address(struct soap*, const struct ns__set_interface_ip_address *, const char*, const char*);

inline int soap_write_ns__set_interface_ip_address(struct soap *soap, struct ns__set_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__set_interface_ip_address(soap, p), 0) || ::soap_put_ns__set_interface_ip_address(soap, p, "ns:set-interface-ip-address", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__set_interface_ip_address(struct soap *soap, const char *URL, struct ns__set_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_interface_ip_address(soap, p), 0) || ::soap_put_ns__set_interface_ip_address(soap, p, "ns:set-interface-ip-address", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__set_interface_ip_address(struct soap *soap, const char *URL, struct ns__set_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_interface_ip_address(soap, p), 0) || ::soap_put_ns__set_interface_ip_address(soap, p, "ns:set-interface-ip-address", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__set_interface_ip_address(struct soap *soap, const char *URL, struct ns__set_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_interface_ip_address(soap, p), 0) || ::soap_put_ns__set_interface_ip_address(soap, p, "ns:set-interface-ip-address", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__set_interface_ip_address * SOAP_FMAC4 soap_get_ns__set_interface_ip_address(struct soap*, struct ns__set_interface_ip_address *, const char*, const char*);

inline int soap_read_ns__set_interface_ip_address(struct soap *soap, struct ns__set_interface_ip_address *p)
{
	if (p)
	{	::soap_default_ns__set_interface_ip_address(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__set_interface_ip_address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__set_interface_ip_address(struct soap *soap, const char *URL, struct ns__set_interface_ip_address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__set_interface_ip_address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__set_interface_ip_address(struct soap *soap, struct ns__set_interface_ip_address *p)
{
	if (::soap_read_ns__set_interface_ip_address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__set_hostname_DEFINED
#define SOAP_TYPE_ns__set_hostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__set_hostname(struct soap*, struct ns__set_hostname *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__set_hostname(struct soap*, const struct ns__set_hostname *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__set_hostname(struct soap*, const char*, int, const struct ns__set_hostname *, const char*);
SOAP_FMAC3 struct ns__set_hostname * SOAP_FMAC4 soap_in_ns__set_hostname(struct soap*, const char*, struct ns__set_hostname *, const char*);
SOAP_FMAC1 struct ns__set_hostname * SOAP_FMAC2 soap_instantiate_ns__set_hostname(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__set_hostname * soap_new_ns__set_hostname(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__set_hostname(soap, n, NULL, NULL, NULL);
}

inline struct ns__set_hostname * soap_new_req_ns__set_hostname(
	struct soap *soap,
	const std::string& hostname)
{
	struct ns__set_hostname *_p = ::soap_new_ns__set_hostname(soap);
	if (_p)
	{	::soap_default_ns__set_hostname(soap, _p);
		_p->hostname = hostname;
	}
	return _p;
}

inline struct ns__set_hostname * soap_new_set_ns__set_hostname(
	struct soap *soap,
	const std::string& hostname)
{
	struct ns__set_hostname *_p = ::soap_new_ns__set_hostname(soap);
	if (_p)
	{	::soap_default_ns__set_hostname(soap, _p);
		_p->hostname = hostname;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__set_hostname(struct soap*, const struct ns__set_hostname *, const char*, const char*);

inline int soap_write_ns__set_hostname(struct soap *soap, struct ns__set_hostname const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__set_hostname(soap, p), 0) || ::soap_put_ns__set_hostname(soap, p, "ns:set-hostname", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__set_hostname(struct soap *soap, const char *URL, struct ns__set_hostname const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_hostname(soap, p), 0) || ::soap_put_ns__set_hostname(soap, p, "ns:set-hostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__set_hostname(struct soap *soap, const char *URL, struct ns__set_hostname const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_hostname(soap, p), 0) || ::soap_put_ns__set_hostname(soap, p, "ns:set-hostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__set_hostname(struct soap *soap, const char *URL, struct ns__set_hostname const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__set_hostname(soap, p), 0) || ::soap_put_ns__set_hostname(soap, p, "ns:set-hostname", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__set_hostname * SOAP_FMAC4 soap_get_ns__set_hostname(struct soap*, struct ns__set_hostname *, const char*, const char*);

inline int soap_read_ns__set_hostname(struct soap *soap, struct ns__set_hostname *p)
{
	if (p)
	{	::soap_default_ns__set_hostname(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__set_hostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__set_hostname(struct soap *soap, const char *URL, struct ns__set_hostname *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__set_hostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__set_hostname(struct soap *soap, struct ns__set_hostname *p)
{
	if (::soap_read_ns__set_hostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_speed_DEFINED
#define SOAP_TYPE_ns__get_interface_speed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_speed(struct soap*, struct ns__get_interface_speed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_speed(struct soap*, const struct ns__get_interface_speed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_speed(struct soap*, const char*, int, const struct ns__get_interface_speed *, const char*);
SOAP_FMAC3 struct ns__get_interface_speed * SOAP_FMAC4 soap_in_ns__get_interface_speed(struct soap*, const char*, struct ns__get_interface_speed *, const char*);
SOAP_FMAC1 struct ns__get_interface_speed * SOAP_FMAC2 soap_instantiate_ns__get_interface_speed(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_speed * soap_new_ns__get_interface_speed(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_speed(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_speed * soap_new_req_ns__get_interface_speed(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_speed *_p = ::soap_new_ns__get_interface_speed(soap);
	if (_p)
	{	::soap_default_ns__get_interface_speed(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_interface_speed * soap_new_set_ns__get_interface_speed(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_speed *_p = ::soap_new_ns__get_interface_speed(soap);
	if (_p)
	{	::soap_default_ns__get_interface_speed(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_speed(struct soap*, const struct ns__get_interface_speed *, const char*, const char*);

inline int soap_write_ns__get_interface_speed(struct soap *soap, struct ns__get_interface_speed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_speed(soap, p), 0) || ::soap_put_ns__get_interface_speed(soap, p, "ns:get-interface-speed", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_speed(struct soap *soap, const char *URL, struct ns__get_interface_speed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speed(soap, p), 0) || ::soap_put_ns__get_interface_speed(soap, p, "ns:get-interface-speed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_speed(struct soap *soap, const char *URL, struct ns__get_interface_speed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speed(soap, p), 0) || ::soap_put_ns__get_interface_speed(soap, p, "ns:get-interface-speed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_speed(struct soap *soap, const char *URL, struct ns__get_interface_speed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speed(soap, p), 0) || ::soap_put_ns__get_interface_speed(soap, p, "ns:get-interface-speed", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_speed * SOAP_FMAC4 soap_get_ns__get_interface_speed(struct soap*, struct ns__get_interface_speed *, const char*, const char*);

inline int soap_read_ns__get_interface_speed(struct soap *soap, struct ns__get_interface_speed *p)
{
	if (p)
	{	::soap_default_ns__get_interface_speed(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_speed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_speed(struct soap *soap, const char *URL, struct ns__get_interface_speed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_speed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_speed(struct soap *soap, struct ns__get_interface_speed *p)
{
	if (::soap_read_ns__get_interface_speed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_speedResponse_DEFINED
#define SOAP_TYPE_ns__get_interface_speedResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_speedResponse(struct soap*, struct ns__get_interface_speedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_speedResponse(struct soap*, const struct ns__get_interface_speedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_speedResponse(struct soap*, const char*, int, const struct ns__get_interface_speedResponse *, const char*);
SOAP_FMAC3 struct ns__get_interface_speedResponse * SOAP_FMAC4 soap_in_ns__get_interface_speedResponse(struct soap*, const char*, struct ns__get_interface_speedResponse *, const char*);
SOAP_FMAC1 struct ns__get_interface_speedResponse * SOAP_FMAC2 soap_instantiate_ns__get_interface_speedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_speedResponse * soap_new_ns__get_interface_speedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_speedResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_speedResponse * soap_new_req_ns__get_interface_speedResponse(
	struct soap *soap,
	int speed)
{
	struct ns__get_interface_speedResponse *_p = ::soap_new_ns__get_interface_speedResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_speedResponse(soap, _p);
		_p->speed = speed;
	}
	return _p;
}

inline struct ns__get_interface_speedResponse * soap_new_set_ns__get_interface_speedResponse(
	struct soap *soap,
	int speed)
{
	struct ns__get_interface_speedResponse *_p = ::soap_new_ns__get_interface_speedResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_speedResponse(soap, _p);
		_p->speed = speed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_speedResponse(struct soap*, const struct ns__get_interface_speedResponse *, const char*, const char*);

inline int soap_write_ns__get_interface_speedResponse(struct soap *soap, struct ns__get_interface_speedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_speedResponse(soap, p), 0) || ::soap_put_ns__get_interface_speedResponse(soap, p, "ns:get-interface-speedResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_speedResponse(struct soap *soap, const char *URL, struct ns__get_interface_speedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speedResponse(soap, p), 0) || ::soap_put_ns__get_interface_speedResponse(soap, p, "ns:get-interface-speedResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_speedResponse(struct soap *soap, const char *URL, struct ns__get_interface_speedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speedResponse(soap, p), 0) || ::soap_put_ns__get_interface_speedResponse(soap, p, "ns:get-interface-speedResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_speedResponse(struct soap *soap, const char *URL, struct ns__get_interface_speedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_speedResponse(soap, p), 0) || ::soap_put_ns__get_interface_speedResponse(soap, p, "ns:get-interface-speedResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_speedResponse * SOAP_FMAC4 soap_get_ns__get_interface_speedResponse(struct soap*, struct ns__get_interface_speedResponse *, const char*, const char*);

inline int soap_read_ns__get_interface_speedResponse(struct soap *soap, struct ns__get_interface_speedResponse *p)
{
	if (p)
	{	::soap_default_ns__get_interface_speedResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_speedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_speedResponse(struct soap *soap, const char *URL, struct ns__get_interface_speedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_speedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_speedResponse(struct soap *soap, struct ns__get_interface_speedResponse *p)
{
	if (::soap_read_ns__get_interface_speedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_ip_address_DEFINED
#define SOAP_TYPE_ns__get_interface_ip_address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_ip_address(struct soap*, struct ns__get_interface_ip_address *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_ip_address(struct soap*, const struct ns__get_interface_ip_address *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_ip_address(struct soap*, const char*, int, const struct ns__get_interface_ip_address *, const char*);
SOAP_FMAC3 struct ns__get_interface_ip_address * SOAP_FMAC4 soap_in_ns__get_interface_ip_address(struct soap*, const char*, struct ns__get_interface_ip_address *, const char*);
SOAP_FMAC1 struct ns__get_interface_ip_address * SOAP_FMAC2 soap_instantiate_ns__get_interface_ip_address(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_ip_address * soap_new_ns__get_interface_ip_address(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_ip_address(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_ip_address * soap_new_req_ns__get_interface_ip_address(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_ip_address *_p = ::soap_new_ns__get_interface_ip_address(soap);
	if (_p)
	{	::soap_default_ns__get_interface_ip_address(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_interface_ip_address * soap_new_set_ns__get_interface_ip_address(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_ip_address *_p = ::soap_new_ns__get_interface_ip_address(soap);
	if (_p)
	{	::soap_default_ns__get_interface_ip_address(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_ip_address(struct soap*, const struct ns__get_interface_ip_address *, const char*, const char*);

inline int soap_write_ns__get_interface_ip_address(struct soap *soap, struct ns__get_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_ip_address(soap, p), 0) || ::soap_put_ns__get_interface_ip_address(soap, p, "ns:get-interface-ip-address", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_ip_address(struct soap *soap, const char *URL, struct ns__get_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_address(soap, p), 0) || ::soap_put_ns__get_interface_ip_address(soap, p, "ns:get-interface-ip-address", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_ip_address(struct soap *soap, const char *URL, struct ns__get_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_address(soap, p), 0) || ::soap_put_ns__get_interface_ip_address(soap, p, "ns:get-interface-ip-address", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_ip_address(struct soap *soap, const char *URL, struct ns__get_interface_ip_address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_address(soap, p), 0) || ::soap_put_ns__get_interface_ip_address(soap, p, "ns:get-interface-ip-address", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_ip_address * SOAP_FMAC4 soap_get_ns__get_interface_ip_address(struct soap*, struct ns__get_interface_ip_address *, const char*, const char*);

inline int soap_read_ns__get_interface_ip_address(struct soap *soap, struct ns__get_interface_ip_address *p)
{
	if (p)
	{	::soap_default_ns__get_interface_ip_address(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_ip_address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_ip_address(struct soap *soap, const char *URL, struct ns__get_interface_ip_address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_ip_address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_ip_address(struct soap *soap, struct ns__get_interface_ip_address *p)
{
	if (::soap_read_ns__get_interface_ip_address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_ip_addressResponse_DEFINED
#define SOAP_TYPE_ns__get_interface_ip_addressResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_ip_addressResponse(struct soap*, struct ns__get_interface_ip_addressResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_ip_addressResponse(struct soap*, const struct ns__get_interface_ip_addressResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_ip_addressResponse(struct soap*, const char*, int, const struct ns__get_interface_ip_addressResponse *, const char*);
SOAP_FMAC3 struct ns__get_interface_ip_addressResponse * SOAP_FMAC4 soap_in_ns__get_interface_ip_addressResponse(struct soap*, const char*, struct ns__get_interface_ip_addressResponse *, const char*);
SOAP_FMAC1 struct ns__get_interface_ip_addressResponse * SOAP_FMAC2 soap_instantiate_ns__get_interface_ip_addressResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_ip_addressResponse * soap_new_ns__get_interface_ip_addressResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_ip_addressResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_ip_addressResponse * soap_new_req_ns__get_interface_ip_addressResponse(
	struct soap *soap,
	const std::string& ip_address)
{
	struct ns__get_interface_ip_addressResponse *_p = ::soap_new_ns__get_interface_ip_addressResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_ip_addressResponse(soap, _p);
		_p->ip_address = ip_address;
	}
	return _p;
}

inline struct ns__get_interface_ip_addressResponse * soap_new_set_ns__get_interface_ip_addressResponse(
	struct soap *soap,
	const std::string& ip_address)
{
	struct ns__get_interface_ip_addressResponse *_p = ::soap_new_ns__get_interface_ip_addressResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_ip_addressResponse(soap, _p);
		_p->ip_address = ip_address;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_ip_addressResponse(struct soap*, const struct ns__get_interface_ip_addressResponse *, const char*, const char*);

inline int soap_write_ns__get_interface_ip_addressResponse(struct soap *soap, struct ns__get_interface_ip_addressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_ip_addressResponse(soap, p), 0) || ::soap_put_ns__get_interface_ip_addressResponse(soap, p, "ns:get-interface-ip-addressResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_ip_addressResponse(struct soap *soap, const char *URL, struct ns__get_interface_ip_addressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_addressResponse(soap, p), 0) || ::soap_put_ns__get_interface_ip_addressResponse(soap, p, "ns:get-interface-ip-addressResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_ip_addressResponse(struct soap *soap, const char *URL, struct ns__get_interface_ip_addressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_addressResponse(soap, p), 0) || ::soap_put_ns__get_interface_ip_addressResponse(soap, p, "ns:get-interface-ip-addressResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_ip_addressResponse(struct soap *soap, const char *URL, struct ns__get_interface_ip_addressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_ip_addressResponse(soap, p), 0) || ::soap_put_ns__get_interface_ip_addressResponse(soap, p, "ns:get-interface-ip-addressResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_ip_addressResponse * SOAP_FMAC4 soap_get_ns__get_interface_ip_addressResponse(struct soap*, struct ns__get_interface_ip_addressResponse *, const char*, const char*);

inline int soap_read_ns__get_interface_ip_addressResponse(struct soap *soap, struct ns__get_interface_ip_addressResponse *p)
{
	if (p)
	{	::soap_default_ns__get_interface_ip_addressResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_ip_addressResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_ip_addressResponse(struct soap *soap, const char *URL, struct ns__get_interface_ip_addressResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_ip_addressResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_ip_addressResponse(struct soap *soap, struct ns__get_interface_ip_addressResponse *p)
{
	if (::soap_read_ns__get_interface_ip_addressResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_info_DEFINED
#define SOAP_TYPE_ns__get_interface_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_info(struct soap*, struct ns__get_interface_info *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_info(struct soap*, const struct ns__get_interface_info *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_info(struct soap*, const char*, int, const struct ns__get_interface_info *, const char*);
SOAP_FMAC3 struct ns__get_interface_info * SOAP_FMAC4 soap_in_ns__get_interface_info(struct soap*, const char*, struct ns__get_interface_info *, const char*);
SOAP_FMAC1 struct ns__get_interface_info * SOAP_FMAC2 soap_instantiate_ns__get_interface_info(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_info * soap_new_ns__get_interface_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_info(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_info * soap_new_req_ns__get_interface_info(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_info *_p = ::soap_new_ns__get_interface_info(soap);
	if (_p)
	{	::soap_default_ns__get_interface_info(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_interface_info * soap_new_set_ns__get_interface_info(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_interface_info *_p = ::soap_new_ns__get_interface_info(soap);
	if (_p)
	{	::soap_default_ns__get_interface_info(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_info(struct soap*, const struct ns__get_interface_info *, const char*, const char*);

inline int soap_write_ns__get_interface_info(struct soap *soap, struct ns__get_interface_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_info(soap, p), 0) || ::soap_put_ns__get_interface_info(soap, p, "ns:get-interface-info", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_info(struct soap *soap, const char *URL, struct ns__get_interface_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_info(soap, p), 0) || ::soap_put_ns__get_interface_info(soap, p, "ns:get-interface-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_info(struct soap *soap, const char *URL, struct ns__get_interface_info const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_info(soap, p), 0) || ::soap_put_ns__get_interface_info(soap, p, "ns:get-interface-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_info(struct soap *soap, const char *URL, struct ns__get_interface_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_info(soap, p), 0) || ::soap_put_ns__get_interface_info(soap, p, "ns:get-interface-info", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_info * SOAP_FMAC4 soap_get_ns__get_interface_info(struct soap*, struct ns__get_interface_info *, const char*, const char*);

inline int soap_read_ns__get_interface_info(struct soap *soap, struct ns__get_interface_info *p)
{
	if (p)
	{	::soap_default_ns__get_interface_info(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_info(struct soap *soap, const char *URL, struct ns__get_interface_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_info(struct soap *soap, struct ns__get_interface_info *p)
{
	if (::soap_read_ns__get_interface_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_infoResponse_DEFINED
#define SOAP_TYPE_ns__get_interface_infoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_infoResponse(struct soap*, struct ns__get_interface_infoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_infoResponse(struct soap*, const struct ns__get_interface_infoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_infoResponse(struct soap*, const char*, int, const struct ns__get_interface_infoResponse *, const char*);
SOAP_FMAC3 struct ns__get_interface_infoResponse * SOAP_FMAC4 soap_in_ns__get_interface_infoResponse(struct soap*, const char*, struct ns__get_interface_infoResponse *, const char*);
SOAP_FMAC1 struct ns__get_interface_infoResponse * SOAP_FMAC2 soap_instantiate_ns__get_interface_infoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_infoResponse * soap_new_ns__get_interface_infoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_infoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_infoResponse * soap_new_req_ns__get_interface_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_interface_infoResponse *_p = ::soap_new_ns__get_interface_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}

inline struct ns__get_interface_infoResponse * soap_new_set_ns__get_interface_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_interface_infoResponse *_p = ::soap_new_ns__get_interface_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_infoResponse(struct soap*, const struct ns__get_interface_infoResponse *, const char*, const char*);

inline int soap_write_ns__get_interface_infoResponse(struct soap *soap, struct ns__get_interface_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_infoResponse(soap, p), 0) || ::soap_put_ns__get_interface_infoResponse(soap, p, "ns:get-interface-infoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_infoResponse(struct soap *soap, const char *URL, struct ns__get_interface_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_infoResponse(soap, p), 0) || ::soap_put_ns__get_interface_infoResponse(soap, p, "ns:get-interface-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_infoResponse(struct soap *soap, const char *URL, struct ns__get_interface_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_infoResponse(soap, p), 0) || ::soap_put_ns__get_interface_infoResponse(soap, p, "ns:get-interface-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_infoResponse(struct soap *soap, const char *URL, struct ns__get_interface_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_infoResponse(soap, p), 0) || ::soap_put_ns__get_interface_infoResponse(soap, p, "ns:get-interface-infoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_infoResponse * SOAP_FMAC4 soap_get_ns__get_interface_infoResponse(struct soap*, struct ns__get_interface_infoResponse *, const char*, const char*);

inline int soap_read_ns__get_interface_infoResponse(struct soap *soap, struct ns__get_interface_infoResponse *p)
{
	if (p)
	{	::soap_default_ns__get_interface_infoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_infoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_infoResponse(struct soap *soap, const char *URL, struct ns__get_interface_infoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_infoResponse(struct soap *soap, struct ns__get_interface_infoResponse *p)
{
	if (::soap_read_ns__get_interface_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_names_DEFINED
#define SOAP_TYPE_ns__get_interface_names_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_names(struct soap*, struct ns__get_interface_names *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_names(struct soap*, const struct ns__get_interface_names *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_names(struct soap*, const char*, int, const struct ns__get_interface_names *, const char*);
SOAP_FMAC3 struct ns__get_interface_names * SOAP_FMAC4 soap_in_ns__get_interface_names(struct soap*, const char*, struct ns__get_interface_names *, const char*);
SOAP_FMAC1 struct ns__get_interface_names * SOAP_FMAC2 soap_instantiate_ns__get_interface_names(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_names * soap_new_ns__get_interface_names(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_names(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_names * soap_new_req_ns__get_interface_names(
	struct soap *soap)
{
	struct ns__get_interface_names *_p = ::soap_new_ns__get_interface_names(soap);
	if (_p)
	{	::soap_default_ns__get_interface_names(soap, _p);
	}
	return _p;
}

inline struct ns__get_interface_names * soap_new_set_ns__get_interface_names(
	struct soap *soap)
{
	struct ns__get_interface_names *_p = ::soap_new_ns__get_interface_names(soap);
	if (_p)
	{	::soap_default_ns__get_interface_names(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_names(struct soap*, const struct ns__get_interface_names *, const char*, const char*);

inline int soap_write_ns__get_interface_names(struct soap *soap, struct ns__get_interface_names const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_names(soap, p), 0) || ::soap_put_ns__get_interface_names(soap, p, "ns:get-interface-names", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_names(struct soap *soap, const char *URL, struct ns__get_interface_names const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_names(soap, p), 0) || ::soap_put_ns__get_interface_names(soap, p, "ns:get-interface-names", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_names(struct soap *soap, const char *URL, struct ns__get_interface_names const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_names(soap, p), 0) || ::soap_put_ns__get_interface_names(soap, p, "ns:get-interface-names", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_names(struct soap *soap, const char *URL, struct ns__get_interface_names const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_names(soap, p), 0) || ::soap_put_ns__get_interface_names(soap, p, "ns:get-interface-names", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_names * SOAP_FMAC4 soap_get_ns__get_interface_names(struct soap*, struct ns__get_interface_names *, const char*, const char*);

inline int soap_read_ns__get_interface_names(struct soap *soap, struct ns__get_interface_names *p)
{
	if (p)
	{	::soap_default_ns__get_interface_names(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_names(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_names(struct soap *soap, const char *URL, struct ns__get_interface_names *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_names(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_names(struct soap *soap, struct ns__get_interface_names *p)
{
	if (::soap_read_ns__get_interface_names(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_namesResponse_DEFINED
#define SOAP_TYPE_ns__get_interface_namesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_namesResponse(struct soap*, struct ns__get_interface_namesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_namesResponse(struct soap*, const struct ns__get_interface_namesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_namesResponse(struct soap*, const char*, int, const struct ns__get_interface_namesResponse *, const char*);
SOAP_FMAC3 struct ns__get_interface_namesResponse * SOAP_FMAC4 soap_in_ns__get_interface_namesResponse(struct soap*, const char*, struct ns__get_interface_namesResponse *, const char*);
SOAP_FMAC1 struct ns__get_interface_namesResponse * SOAP_FMAC2 soap_instantiate_ns__get_interface_namesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_namesResponse * soap_new_ns__get_interface_namesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_namesResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_namesResponse * soap_new_req_ns__get_interface_namesResponse(
	struct soap *soap)
{
	struct ns__get_interface_namesResponse *_p = ::soap_new_ns__get_interface_namesResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_namesResponse(soap, _p);
	}
	return _p;
}

inline struct ns__get_interface_namesResponse * soap_new_set_ns__get_interface_namesResponse(
	struct soap *soap,
	std::string *names)
{
	struct ns__get_interface_namesResponse *_p = ::soap_new_ns__get_interface_namesResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_namesResponse(soap, _p);
		_p->names = names;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_namesResponse(struct soap*, const struct ns__get_interface_namesResponse *, const char*, const char*);

inline int soap_write_ns__get_interface_namesResponse(struct soap *soap, struct ns__get_interface_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_namesResponse(soap, p), 0) || ::soap_put_ns__get_interface_namesResponse(soap, p, "ns:get-interface-namesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_namesResponse(struct soap *soap, const char *URL, struct ns__get_interface_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_namesResponse(soap, p), 0) || ::soap_put_ns__get_interface_namesResponse(soap, p, "ns:get-interface-namesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_namesResponse(struct soap *soap, const char *URL, struct ns__get_interface_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_namesResponse(soap, p), 0) || ::soap_put_ns__get_interface_namesResponse(soap, p, "ns:get-interface-namesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_namesResponse(struct soap *soap, const char *URL, struct ns__get_interface_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_namesResponse(soap, p), 0) || ::soap_put_ns__get_interface_namesResponse(soap, p, "ns:get-interface-namesResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_namesResponse * SOAP_FMAC4 soap_get_ns__get_interface_namesResponse(struct soap*, struct ns__get_interface_namesResponse *, const char*, const char*);

inline int soap_read_ns__get_interface_namesResponse(struct soap *soap, struct ns__get_interface_namesResponse *p)
{
	if (p)
	{	::soap_default_ns__get_interface_namesResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_namesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_namesResponse(struct soap *soap, const char *URL, struct ns__get_interface_namesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_namesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_namesResponse(struct soap *soap, struct ns__get_interface_namesResponse *p)
{
	if (::soap_read_ns__get_interface_namesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_number_DEFINED
#define SOAP_TYPE_ns__get_interface_number_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_number(struct soap*, struct ns__get_interface_number *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_number(struct soap*, const struct ns__get_interface_number *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_number(struct soap*, const char*, int, const struct ns__get_interface_number *, const char*);
SOAP_FMAC3 struct ns__get_interface_number * SOAP_FMAC4 soap_in_ns__get_interface_number(struct soap*, const char*, struct ns__get_interface_number *, const char*);
SOAP_FMAC1 struct ns__get_interface_number * SOAP_FMAC2 soap_instantiate_ns__get_interface_number(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_number * soap_new_ns__get_interface_number(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_number(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_number * soap_new_req_ns__get_interface_number(
	struct soap *soap)
{
	struct ns__get_interface_number *_p = ::soap_new_ns__get_interface_number(soap);
	if (_p)
	{	::soap_default_ns__get_interface_number(soap, _p);
	}
	return _p;
}

inline struct ns__get_interface_number * soap_new_set_ns__get_interface_number(
	struct soap *soap)
{
	struct ns__get_interface_number *_p = ::soap_new_ns__get_interface_number(soap);
	if (_p)
	{	::soap_default_ns__get_interface_number(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_number(struct soap*, const struct ns__get_interface_number *, const char*, const char*);

inline int soap_write_ns__get_interface_number(struct soap *soap, struct ns__get_interface_number const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_number(soap, p), 0) || ::soap_put_ns__get_interface_number(soap, p, "ns:get-interface-number", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_number(struct soap *soap, const char *URL, struct ns__get_interface_number const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_number(soap, p), 0) || ::soap_put_ns__get_interface_number(soap, p, "ns:get-interface-number", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_number(struct soap *soap, const char *URL, struct ns__get_interface_number const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_number(soap, p), 0) || ::soap_put_ns__get_interface_number(soap, p, "ns:get-interface-number", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_number(struct soap *soap, const char *URL, struct ns__get_interface_number const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_number(soap, p), 0) || ::soap_put_ns__get_interface_number(soap, p, "ns:get-interface-number", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_number * SOAP_FMAC4 soap_get_ns__get_interface_number(struct soap*, struct ns__get_interface_number *, const char*, const char*);

inline int soap_read_ns__get_interface_number(struct soap *soap, struct ns__get_interface_number *p)
{
	if (p)
	{	::soap_default_ns__get_interface_number(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_number(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_number(struct soap *soap, const char *URL, struct ns__get_interface_number *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_number(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_number(struct soap *soap, struct ns__get_interface_number *p)
{
	if (::soap_read_ns__get_interface_number(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_interface_numberResponse_DEFINED
#define SOAP_TYPE_ns__get_interface_numberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_interface_numberResponse(struct soap*, struct ns__get_interface_numberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_interface_numberResponse(struct soap*, const struct ns__get_interface_numberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_interface_numberResponse(struct soap*, const char*, int, const struct ns__get_interface_numberResponse *, const char*);
SOAP_FMAC3 struct ns__get_interface_numberResponse * SOAP_FMAC4 soap_in_ns__get_interface_numberResponse(struct soap*, const char*, struct ns__get_interface_numberResponse *, const char*);
SOAP_FMAC1 struct ns__get_interface_numberResponse * SOAP_FMAC2 soap_instantiate_ns__get_interface_numberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_interface_numberResponse * soap_new_ns__get_interface_numberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_interface_numberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_interface_numberResponse * soap_new_req_ns__get_interface_numberResponse(
	struct soap *soap,
	unsigned int number)
{
	struct ns__get_interface_numberResponse *_p = ::soap_new_ns__get_interface_numberResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_numberResponse(soap, _p);
		_p->number = number;
	}
	return _p;
}

inline struct ns__get_interface_numberResponse * soap_new_set_ns__get_interface_numberResponse(
	struct soap *soap,
	unsigned int number)
{
	struct ns__get_interface_numberResponse *_p = ::soap_new_ns__get_interface_numberResponse(soap);
	if (_p)
	{	::soap_default_ns__get_interface_numberResponse(soap, _p);
		_p->number = number;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_interface_numberResponse(struct soap*, const struct ns__get_interface_numberResponse *, const char*, const char*);

inline int soap_write_ns__get_interface_numberResponse(struct soap *soap, struct ns__get_interface_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_interface_numberResponse(soap, p), 0) || ::soap_put_ns__get_interface_numberResponse(soap, p, "ns:get-interface-numberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_interface_numberResponse(struct soap *soap, const char *URL, struct ns__get_interface_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_numberResponse(soap, p), 0) || ::soap_put_ns__get_interface_numberResponse(soap, p, "ns:get-interface-numberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_interface_numberResponse(struct soap *soap, const char *URL, struct ns__get_interface_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_numberResponse(soap, p), 0) || ::soap_put_ns__get_interface_numberResponse(soap, p, "ns:get-interface-numberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_interface_numberResponse(struct soap *soap, const char *URL, struct ns__get_interface_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_interface_numberResponse(soap, p), 0) || ::soap_put_ns__get_interface_numberResponse(soap, p, "ns:get-interface-numberResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_interface_numberResponse * SOAP_FMAC4 soap_get_ns__get_interface_numberResponse(struct soap*, struct ns__get_interface_numberResponse *, const char*, const char*);

inline int soap_read_ns__get_interface_numberResponse(struct soap *soap, struct ns__get_interface_numberResponse *p)
{
	if (p)
	{	::soap_default_ns__get_interface_numberResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_interface_numberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_interface_numberResponse(struct soap *soap, const char *URL, struct ns__get_interface_numberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_interface_numberResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_interface_numberResponse(struct soap *soap, struct ns__get_interface_numberResponse *p)
{
	if (::soap_read_ns__get_interface_numberResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_used_capatity_DEFINED
#define SOAP_TYPE_ns__get_drive_used_capatity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_used_capatity(struct soap*, struct ns__get_drive_used_capatity *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_used_capatity(struct soap*, const struct ns__get_drive_used_capatity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_used_capatity(struct soap*, const char*, int, const struct ns__get_drive_used_capatity *, const char*);
SOAP_FMAC3 struct ns__get_drive_used_capatity * SOAP_FMAC4 soap_in_ns__get_drive_used_capatity(struct soap*, const char*, struct ns__get_drive_used_capatity *, const char*);
SOAP_FMAC1 struct ns__get_drive_used_capatity * SOAP_FMAC2 soap_instantiate_ns__get_drive_used_capatity(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_used_capatity * soap_new_ns__get_drive_used_capatity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_used_capatity(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_used_capatity * soap_new_req_ns__get_drive_used_capatity(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_used_capatity *_p = ::soap_new_ns__get_drive_used_capatity(soap);
	if (_p)
	{	::soap_default_ns__get_drive_used_capatity(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_drive_used_capatity * soap_new_set_ns__get_drive_used_capatity(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_used_capatity *_p = ::soap_new_ns__get_drive_used_capatity(soap);
	if (_p)
	{	::soap_default_ns__get_drive_used_capatity(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_used_capatity(struct soap*, const struct ns__get_drive_used_capatity *, const char*, const char*);

inline int soap_write_ns__get_drive_used_capatity(struct soap *soap, struct ns__get_drive_used_capatity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_used_capatity(soap, p), 0) || ::soap_put_ns__get_drive_used_capatity(soap, p, "ns:get-drive-used-capatity", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_used_capatity(struct soap *soap, const char *URL, struct ns__get_drive_used_capatity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatity(soap, p), 0) || ::soap_put_ns__get_drive_used_capatity(soap, p, "ns:get-drive-used-capatity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_used_capatity(struct soap *soap, const char *URL, struct ns__get_drive_used_capatity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatity(soap, p), 0) || ::soap_put_ns__get_drive_used_capatity(soap, p, "ns:get-drive-used-capatity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_used_capatity(struct soap *soap, const char *URL, struct ns__get_drive_used_capatity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatity(soap, p), 0) || ::soap_put_ns__get_drive_used_capatity(soap, p, "ns:get-drive-used-capatity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_used_capatity * SOAP_FMAC4 soap_get_ns__get_drive_used_capatity(struct soap*, struct ns__get_drive_used_capatity *, const char*, const char*);

inline int soap_read_ns__get_drive_used_capatity(struct soap *soap, struct ns__get_drive_used_capatity *p)
{
	if (p)
	{	::soap_default_ns__get_drive_used_capatity(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_used_capatity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_used_capatity(struct soap *soap, const char *URL, struct ns__get_drive_used_capatity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_used_capatity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_used_capatity(struct soap *soap, struct ns__get_drive_used_capatity *p)
{
	if (::soap_read_ns__get_drive_used_capatity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_used_capatityResponse_DEFINED
#define SOAP_TYPE_ns__get_drive_used_capatityResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_used_capatityResponse(struct soap*, struct ns__get_drive_used_capatityResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_used_capatityResponse(struct soap*, const struct ns__get_drive_used_capatityResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_used_capatityResponse(struct soap*, const char*, int, const struct ns__get_drive_used_capatityResponse *, const char*);
SOAP_FMAC3 struct ns__get_drive_used_capatityResponse * SOAP_FMAC4 soap_in_ns__get_drive_used_capatityResponse(struct soap*, const char*, struct ns__get_drive_used_capatityResponse *, const char*);
SOAP_FMAC1 struct ns__get_drive_used_capatityResponse * SOAP_FMAC2 soap_instantiate_ns__get_drive_used_capatityResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_used_capatityResponse * soap_new_ns__get_drive_used_capatityResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_used_capatityResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_used_capatityResponse * soap_new_req_ns__get_drive_used_capatityResponse(
	struct soap *soap,
	float usage)
{
	struct ns__get_drive_used_capatityResponse *_p = ::soap_new_ns__get_drive_used_capatityResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_used_capatityResponse(soap, _p);
		_p->usage = usage;
	}
	return _p;
}

inline struct ns__get_drive_used_capatityResponse * soap_new_set_ns__get_drive_used_capatityResponse(
	struct soap *soap,
	float usage)
{
	struct ns__get_drive_used_capatityResponse *_p = ::soap_new_ns__get_drive_used_capatityResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_used_capatityResponse(soap, _p);
		_p->usage = usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_used_capatityResponse(struct soap*, const struct ns__get_drive_used_capatityResponse *, const char*, const char*);

inline int soap_write_ns__get_drive_used_capatityResponse(struct soap *soap, struct ns__get_drive_used_capatityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_used_capatityResponse(soap, p), 0) || ::soap_put_ns__get_drive_used_capatityResponse(soap, p, "ns:get-drive-used-capatityResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_used_capatityResponse(struct soap *soap, const char *URL, struct ns__get_drive_used_capatityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatityResponse(soap, p), 0) || ::soap_put_ns__get_drive_used_capatityResponse(soap, p, "ns:get-drive-used-capatityResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_used_capatityResponse(struct soap *soap, const char *URL, struct ns__get_drive_used_capatityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatityResponse(soap, p), 0) || ::soap_put_ns__get_drive_used_capatityResponse(soap, p, "ns:get-drive-used-capatityResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_used_capatityResponse(struct soap *soap, const char *URL, struct ns__get_drive_used_capatityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_used_capatityResponse(soap, p), 0) || ::soap_put_ns__get_drive_used_capatityResponse(soap, p, "ns:get-drive-used-capatityResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_used_capatityResponse * SOAP_FMAC4 soap_get_ns__get_drive_used_capatityResponse(struct soap*, struct ns__get_drive_used_capatityResponse *, const char*, const char*);

inline int soap_read_ns__get_drive_used_capatityResponse(struct soap *soap, struct ns__get_drive_used_capatityResponse *p)
{
	if (p)
	{	::soap_default_ns__get_drive_used_capatityResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_used_capatityResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_used_capatityResponse(struct soap *soap, const char *URL, struct ns__get_drive_used_capatityResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_used_capatityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_used_capatityResponse(struct soap *soap, struct ns__get_drive_used_capatityResponse *p)
{
	if (::soap_read_ns__get_drive_used_capatityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_total_capacity_DEFINED
#define SOAP_TYPE_ns__get_drive_total_capacity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_total_capacity(struct soap*, struct ns__get_drive_total_capacity *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_total_capacity(struct soap*, const struct ns__get_drive_total_capacity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_total_capacity(struct soap*, const char*, int, const struct ns__get_drive_total_capacity *, const char*);
SOAP_FMAC3 struct ns__get_drive_total_capacity * SOAP_FMAC4 soap_in_ns__get_drive_total_capacity(struct soap*, const char*, struct ns__get_drive_total_capacity *, const char*);
SOAP_FMAC1 struct ns__get_drive_total_capacity * SOAP_FMAC2 soap_instantiate_ns__get_drive_total_capacity(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_total_capacity * soap_new_ns__get_drive_total_capacity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_total_capacity(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_total_capacity * soap_new_req_ns__get_drive_total_capacity(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_total_capacity *_p = ::soap_new_ns__get_drive_total_capacity(soap);
	if (_p)
	{	::soap_default_ns__get_drive_total_capacity(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_drive_total_capacity * soap_new_set_ns__get_drive_total_capacity(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_total_capacity *_p = ::soap_new_ns__get_drive_total_capacity(soap);
	if (_p)
	{	::soap_default_ns__get_drive_total_capacity(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_total_capacity(struct soap*, const struct ns__get_drive_total_capacity *, const char*, const char*);

inline int soap_write_ns__get_drive_total_capacity(struct soap *soap, struct ns__get_drive_total_capacity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_total_capacity(soap, p), 0) || ::soap_put_ns__get_drive_total_capacity(soap, p, "ns:get-drive-total-capacity", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_total_capacity(struct soap *soap, const char *URL, struct ns__get_drive_total_capacity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacity(soap, p), 0) || ::soap_put_ns__get_drive_total_capacity(soap, p, "ns:get-drive-total-capacity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_total_capacity(struct soap *soap, const char *URL, struct ns__get_drive_total_capacity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacity(soap, p), 0) || ::soap_put_ns__get_drive_total_capacity(soap, p, "ns:get-drive-total-capacity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_total_capacity(struct soap *soap, const char *URL, struct ns__get_drive_total_capacity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacity(soap, p), 0) || ::soap_put_ns__get_drive_total_capacity(soap, p, "ns:get-drive-total-capacity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_total_capacity * SOAP_FMAC4 soap_get_ns__get_drive_total_capacity(struct soap*, struct ns__get_drive_total_capacity *, const char*, const char*);

inline int soap_read_ns__get_drive_total_capacity(struct soap *soap, struct ns__get_drive_total_capacity *p)
{
	if (p)
	{	::soap_default_ns__get_drive_total_capacity(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_total_capacity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_total_capacity(struct soap *soap, const char *URL, struct ns__get_drive_total_capacity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_total_capacity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_total_capacity(struct soap *soap, struct ns__get_drive_total_capacity *p)
{
	if (::soap_read_ns__get_drive_total_capacity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_total_capacityResponse_DEFINED
#define SOAP_TYPE_ns__get_drive_total_capacityResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_total_capacityResponse(struct soap*, struct ns__get_drive_total_capacityResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_total_capacityResponse(struct soap*, const struct ns__get_drive_total_capacityResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_total_capacityResponse(struct soap*, const char*, int, const struct ns__get_drive_total_capacityResponse *, const char*);
SOAP_FMAC3 struct ns__get_drive_total_capacityResponse * SOAP_FMAC4 soap_in_ns__get_drive_total_capacityResponse(struct soap*, const char*, struct ns__get_drive_total_capacityResponse *, const char*);
SOAP_FMAC1 struct ns__get_drive_total_capacityResponse * SOAP_FMAC2 soap_instantiate_ns__get_drive_total_capacityResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_total_capacityResponse * soap_new_ns__get_drive_total_capacityResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_total_capacityResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_total_capacityResponse * soap_new_req_ns__get_drive_total_capacityResponse(
	struct soap *soap,
	float total)
{
	struct ns__get_drive_total_capacityResponse *_p = ::soap_new_ns__get_drive_total_capacityResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_total_capacityResponse(soap, _p);
		_p->total = total;
	}
	return _p;
}

inline struct ns__get_drive_total_capacityResponse * soap_new_set_ns__get_drive_total_capacityResponse(
	struct soap *soap,
	float total)
{
	struct ns__get_drive_total_capacityResponse *_p = ::soap_new_ns__get_drive_total_capacityResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_total_capacityResponse(soap, _p);
		_p->total = total;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_total_capacityResponse(struct soap*, const struct ns__get_drive_total_capacityResponse *, const char*, const char*);

inline int soap_write_ns__get_drive_total_capacityResponse(struct soap *soap, struct ns__get_drive_total_capacityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_total_capacityResponse(soap, p), 0) || ::soap_put_ns__get_drive_total_capacityResponse(soap, p, "ns:get-drive-total-capacityResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_total_capacityResponse(struct soap *soap, const char *URL, struct ns__get_drive_total_capacityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacityResponse(soap, p), 0) || ::soap_put_ns__get_drive_total_capacityResponse(soap, p, "ns:get-drive-total-capacityResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_total_capacityResponse(struct soap *soap, const char *URL, struct ns__get_drive_total_capacityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacityResponse(soap, p), 0) || ::soap_put_ns__get_drive_total_capacityResponse(soap, p, "ns:get-drive-total-capacityResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_total_capacityResponse(struct soap *soap, const char *URL, struct ns__get_drive_total_capacityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_total_capacityResponse(soap, p), 0) || ::soap_put_ns__get_drive_total_capacityResponse(soap, p, "ns:get-drive-total-capacityResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_total_capacityResponse * SOAP_FMAC4 soap_get_ns__get_drive_total_capacityResponse(struct soap*, struct ns__get_drive_total_capacityResponse *, const char*, const char*);

inline int soap_read_ns__get_drive_total_capacityResponse(struct soap *soap, struct ns__get_drive_total_capacityResponse *p)
{
	if (p)
	{	::soap_default_ns__get_drive_total_capacityResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_total_capacityResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_total_capacityResponse(struct soap *soap, const char *URL, struct ns__get_drive_total_capacityResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_total_capacityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_total_capacityResponse(struct soap *soap, struct ns__get_drive_total_capacityResponse *p)
{
	if (::soap_read_ns__get_drive_total_capacityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_info_DEFINED
#define SOAP_TYPE_ns__get_drive_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_info(struct soap*, struct ns__get_drive_info *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_info(struct soap*, const struct ns__get_drive_info *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_info(struct soap*, const char*, int, const struct ns__get_drive_info *, const char*);
SOAP_FMAC3 struct ns__get_drive_info * SOAP_FMAC4 soap_in_ns__get_drive_info(struct soap*, const char*, struct ns__get_drive_info *, const char*);
SOAP_FMAC1 struct ns__get_drive_info * SOAP_FMAC2 soap_instantiate_ns__get_drive_info(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_info * soap_new_ns__get_drive_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_info(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_info * soap_new_req_ns__get_drive_info(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_info *_p = ::soap_new_ns__get_drive_info(soap);
	if (_p)
	{	::soap_default_ns__get_drive_info(soap, _p);
		_p->name = name;
	}
	return _p;
}

inline struct ns__get_drive_info * soap_new_set_ns__get_drive_info(
	struct soap *soap,
	const std::string& name)
{
	struct ns__get_drive_info *_p = ::soap_new_ns__get_drive_info(soap);
	if (_p)
	{	::soap_default_ns__get_drive_info(soap, _p);
		_p->name = name;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_info(struct soap*, const struct ns__get_drive_info *, const char*, const char*);

inline int soap_write_ns__get_drive_info(struct soap *soap, struct ns__get_drive_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_info(soap, p), 0) || ::soap_put_ns__get_drive_info(soap, p, "ns:get-drive-info", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_info(struct soap *soap, const char *URL, struct ns__get_drive_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_info(soap, p), 0) || ::soap_put_ns__get_drive_info(soap, p, "ns:get-drive-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_info(struct soap *soap, const char *URL, struct ns__get_drive_info const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_info(soap, p), 0) || ::soap_put_ns__get_drive_info(soap, p, "ns:get-drive-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_info(struct soap *soap, const char *URL, struct ns__get_drive_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_info(soap, p), 0) || ::soap_put_ns__get_drive_info(soap, p, "ns:get-drive-info", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_info * SOAP_FMAC4 soap_get_ns__get_drive_info(struct soap*, struct ns__get_drive_info *, const char*, const char*);

inline int soap_read_ns__get_drive_info(struct soap *soap, struct ns__get_drive_info *p)
{
	if (p)
	{	::soap_default_ns__get_drive_info(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_info(struct soap *soap, const char *URL, struct ns__get_drive_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_info(struct soap *soap, struct ns__get_drive_info *p)
{
	if (::soap_read_ns__get_drive_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_infoResponse_DEFINED
#define SOAP_TYPE_ns__get_drive_infoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_infoResponse(struct soap*, struct ns__get_drive_infoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_infoResponse(struct soap*, const struct ns__get_drive_infoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_infoResponse(struct soap*, const char*, int, const struct ns__get_drive_infoResponse *, const char*);
SOAP_FMAC3 struct ns__get_drive_infoResponse * SOAP_FMAC4 soap_in_ns__get_drive_infoResponse(struct soap*, const char*, struct ns__get_drive_infoResponse *, const char*);
SOAP_FMAC1 struct ns__get_drive_infoResponse * SOAP_FMAC2 soap_instantiate_ns__get_drive_infoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_infoResponse * soap_new_ns__get_drive_infoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_infoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_infoResponse * soap_new_req_ns__get_drive_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_drive_infoResponse *_p = ::soap_new_ns__get_drive_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}

inline struct ns__get_drive_infoResponse * soap_new_set_ns__get_drive_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_drive_infoResponse *_p = ::soap_new_ns__get_drive_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_infoResponse(struct soap*, const struct ns__get_drive_infoResponse *, const char*, const char*);

inline int soap_write_ns__get_drive_infoResponse(struct soap *soap, struct ns__get_drive_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_infoResponse(soap, p), 0) || ::soap_put_ns__get_drive_infoResponse(soap, p, "ns:get-drive-infoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_infoResponse(struct soap *soap, const char *URL, struct ns__get_drive_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_infoResponse(soap, p), 0) || ::soap_put_ns__get_drive_infoResponse(soap, p, "ns:get-drive-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_infoResponse(struct soap *soap, const char *URL, struct ns__get_drive_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_infoResponse(soap, p), 0) || ::soap_put_ns__get_drive_infoResponse(soap, p, "ns:get-drive-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_infoResponse(struct soap *soap, const char *URL, struct ns__get_drive_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_infoResponse(soap, p), 0) || ::soap_put_ns__get_drive_infoResponse(soap, p, "ns:get-drive-infoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_infoResponse * SOAP_FMAC4 soap_get_ns__get_drive_infoResponse(struct soap*, struct ns__get_drive_infoResponse *, const char*, const char*);

inline int soap_read_ns__get_drive_infoResponse(struct soap *soap, struct ns__get_drive_infoResponse *p)
{
	if (p)
	{	::soap_default_ns__get_drive_infoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_infoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_infoResponse(struct soap *soap, const char *URL, struct ns__get_drive_infoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_infoResponse(struct soap *soap, struct ns__get_drive_infoResponse *p)
{
	if (::soap_read_ns__get_drive_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_names_DEFINED
#define SOAP_TYPE_ns__get_drive_names_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_names(struct soap*, struct ns__get_drive_names *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_names(struct soap*, const struct ns__get_drive_names *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_names(struct soap*, const char*, int, const struct ns__get_drive_names *, const char*);
SOAP_FMAC3 struct ns__get_drive_names * SOAP_FMAC4 soap_in_ns__get_drive_names(struct soap*, const char*, struct ns__get_drive_names *, const char*);
SOAP_FMAC1 struct ns__get_drive_names * SOAP_FMAC2 soap_instantiate_ns__get_drive_names(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_names * soap_new_ns__get_drive_names(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_names(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_names * soap_new_req_ns__get_drive_names(
	struct soap *soap)
{
	struct ns__get_drive_names *_p = ::soap_new_ns__get_drive_names(soap);
	if (_p)
	{	::soap_default_ns__get_drive_names(soap, _p);
	}
	return _p;
}

inline struct ns__get_drive_names * soap_new_set_ns__get_drive_names(
	struct soap *soap)
{
	struct ns__get_drive_names *_p = ::soap_new_ns__get_drive_names(soap);
	if (_p)
	{	::soap_default_ns__get_drive_names(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_names(struct soap*, const struct ns__get_drive_names *, const char*, const char*);

inline int soap_write_ns__get_drive_names(struct soap *soap, struct ns__get_drive_names const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_names(soap, p), 0) || ::soap_put_ns__get_drive_names(soap, p, "ns:get-drive-names", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_names(struct soap *soap, const char *URL, struct ns__get_drive_names const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_names(soap, p), 0) || ::soap_put_ns__get_drive_names(soap, p, "ns:get-drive-names", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_names(struct soap *soap, const char *URL, struct ns__get_drive_names const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_names(soap, p), 0) || ::soap_put_ns__get_drive_names(soap, p, "ns:get-drive-names", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_names(struct soap *soap, const char *URL, struct ns__get_drive_names const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_names(soap, p), 0) || ::soap_put_ns__get_drive_names(soap, p, "ns:get-drive-names", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_names * SOAP_FMAC4 soap_get_ns__get_drive_names(struct soap*, struct ns__get_drive_names *, const char*, const char*);

inline int soap_read_ns__get_drive_names(struct soap *soap, struct ns__get_drive_names *p)
{
	if (p)
	{	::soap_default_ns__get_drive_names(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_names(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_names(struct soap *soap, const char *URL, struct ns__get_drive_names *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_names(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_names(struct soap *soap, struct ns__get_drive_names *p)
{
	if (::soap_read_ns__get_drive_names(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_namesResponse_DEFINED
#define SOAP_TYPE_ns__get_drive_namesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_namesResponse(struct soap*, struct ns__get_drive_namesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_namesResponse(struct soap*, const struct ns__get_drive_namesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_namesResponse(struct soap*, const char*, int, const struct ns__get_drive_namesResponse *, const char*);
SOAP_FMAC3 struct ns__get_drive_namesResponse * SOAP_FMAC4 soap_in_ns__get_drive_namesResponse(struct soap*, const char*, struct ns__get_drive_namesResponse *, const char*);
SOAP_FMAC1 struct ns__get_drive_namesResponse * SOAP_FMAC2 soap_instantiate_ns__get_drive_namesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_namesResponse * soap_new_ns__get_drive_namesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_namesResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_namesResponse * soap_new_req_ns__get_drive_namesResponse(
	struct soap *soap)
{
	struct ns__get_drive_namesResponse *_p = ::soap_new_ns__get_drive_namesResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_namesResponse(soap, _p);
	}
	return _p;
}

inline struct ns__get_drive_namesResponse * soap_new_set_ns__get_drive_namesResponse(
	struct soap *soap,
	std::string *names)
{
	struct ns__get_drive_namesResponse *_p = ::soap_new_ns__get_drive_namesResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_namesResponse(soap, _p);
		_p->names = names;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_namesResponse(struct soap*, const struct ns__get_drive_namesResponse *, const char*, const char*);

inline int soap_write_ns__get_drive_namesResponse(struct soap *soap, struct ns__get_drive_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_namesResponse(soap, p), 0) || ::soap_put_ns__get_drive_namesResponse(soap, p, "ns:get-drive-namesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_namesResponse(struct soap *soap, const char *URL, struct ns__get_drive_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_namesResponse(soap, p), 0) || ::soap_put_ns__get_drive_namesResponse(soap, p, "ns:get-drive-namesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_namesResponse(struct soap *soap, const char *URL, struct ns__get_drive_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_namesResponse(soap, p), 0) || ::soap_put_ns__get_drive_namesResponse(soap, p, "ns:get-drive-namesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_namesResponse(struct soap *soap, const char *URL, struct ns__get_drive_namesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_namesResponse(soap, p), 0) || ::soap_put_ns__get_drive_namesResponse(soap, p, "ns:get-drive-namesResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_namesResponse * SOAP_FMAC4 soap_get_ns__get_drive_namesResponse(struct soap*, struct ns__get_drive_namesResponse *, const char*, const char*);

inline int soap_read_ns__get_drive_namesResponse(struct soap *soap, struct ns__get_drive_namesResponse *p)
{
	if (p)
	{	::soap_default_ns__get_drive_namesResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_namesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_namesResponse(struct soap *soap, const char *URL, struct ns__get_drive_namesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_namesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_namesResponse(struct soap *soap, struct ns__get_drive_namesResponse *p)
{
	if (::soap_read_ns__get_drive_namesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_number_DEFINED
#define SOAP_TYPE_ns__get_drive_number_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_number(struct soap*, struct ns__get_drive_number *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_number(struct soap*, const struct ns__get_drive_number *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_number(struct soap*, const char*, int, const struct ns__get_drive_number *, const char*);
SOAP_FMAC3 struct ns__get_drive_number * SOAP_FMAC4 soap_in_ns__get_drive_number(struct soap*, const char*, struct ns__get_drive_number *, const char*);
SOAP_FMAC1 struct ns__get_drive_number * SOAP_FMAC2 soap_instantiate_ns__get_drive_number(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_number * soap_new_ns__get_drive_number(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_number(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_number * soap_new_req_ns__get_drive_number(
	struct soap *soap)
{
	struct ns__get_drive_number *_p = ::soap_new_ns__get_drive_number(soap);
	if (_p)
	{	::soap_default_ns__get_drive_number(soap, _p);
	}
	return _p;
}

inline struct ns__get_drive_number * soap_new_set_ns__get_drive_number(
	struct soap *soap)
{
	struct ns__get_drive_number *_p = ::soap_new_ns__get_drive_number(soap);
	if (_p)
	{	::soap_default_ns__get_drive_number(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_number(struct soap*, const struct ns__get_drive_number *, const char*, const char*);

inline int soap_write_ns__get_drive_number(struct soap *soap, struct ns__get_drive_number const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_number(soap, p), 0) || ::soap_put_ns__get_drive_number(soap, p, "ns:get-drive-number", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_number(struct soap *soap, const char *URL, struct ns__get_drive_number const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_number(soap, p), 0) || ::soap_put_ns__get_drive_number(soap, p, "ns:get-drive-number", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_number(struct soap *soap, const char *URL, struct ns__get_drive_number const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_number(soap, p), 0) || ::soap_put_ns__get_drive_number(soap, p, "ns:get-drive-number", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_number(struct soap *soap, const char *URL, struct ns__get_drive_number const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_number(soap, p), 0) || ::soap_put_ns__get_drive_number(soap, p, "ns:get-drive-number", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_number * SOAP_FMAC4 soap_get_ns__get_drive_number(struct soap*, struct ns__get_drive_number *, const char*, const char*);

inline int soap_read_ns__get_drive_number(struct soap *soap, struct ns__get_drive_number *p)
{
	if (p)
	{	::soap_default_ns__get_drive_number(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_number(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_number(struct soap *soap, const char *URL, struct ns__get_drive_number *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_number(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_number(struct soap *soap, struct ns__get_drive_number *p)
{
	if (::soap_read_ns__get_drive_number(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_drive_numberResponse_DEFINED
#define SOAP_TYPE_ns__get_drive_numberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_drive_numberResponse(struct soap*, struct ns__get_drive_numberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_drive_numberResponse(struct soap*, const struct ns__get_drive_numberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_drive_numberResponse(struct soap*, const char*, int, const struct ns__get_drive_numberResponse *, const char*);
SOAP_FMAC3 struct ns__get_drive_numberResponse * SOAP_FMAC4 soap_in_ns__get_drive_numberResponse(struct soap*, const char*, struct ns__get_drive_numberResponse *, const char*);
SOAP_FMAC1 struct ns__get_drive_numberResponse * SOAP_FMAC2 soap_instantiate_ns__get_drive_numberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_drive_numberResponse * soap_new_ns__get_drive_numberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_drive_numberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_drive_numberResponse * soap_new_req_ns__get_drive_numberResponse(
	struct soap *soap,
	unsigned int number)
{
	struct ns__get_drive_numberResponse *_p = ::soap_new_ns__get_drive_numberResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_numberResponse(soap, _p);
		_p->number = number;
	}
	return _p;
}

inline struct ns__get_drive_numberResponse * soap_new_set_ns__get_drive_numberResponse(
	struct soap *soap,
	unsigned int number)
{
	struct ns__get_drive_numberResponse *_p = ::soap_new_ns__get_drive_numberResponse(soap);
	if (_p)
	{	::soap_default_ns__get_drive_numberResponse(soap, _p);
		_p->number = number;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_drive_numberResponse(struct soap*, const struct ns__get_drive_numberResponse *, const char*, const char*);

inline int soap_write_ns__get_drive_numberResponse(struct soap *soap, struct ns__get_drive_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_drive_numberResponse(soap, p), 0) || ::soap_put_ns__get_drive_numberResponse(soap, p, "ns:get-drive-numberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_drive_numberResponse(struct soap *soap, const char *URL, struct ns__get_drive_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_numberResponse(soap, p), 0) || ::soap_put_ns__get_drive_numberResponse(soap, p, "ns:get-drive-numberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_drive_numberResponse(struct soap *soap, const char *URL, struct ns__get_drive_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_numberResponse(soap, p), 0) || ::soap_put_ns__get_drive_numberResponse(soap, p, "ns:get-drive-numberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_drive_numberResponse(struct soap *soap, const char *URL, struct ns__get_drive_numberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_drive_numberResponse(soap, p), 0) || ::soap_put_ns__get_drive_numberResponse(soap, p, "ns:get-drive-numberResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_drive_numberResponse * SOAP_FMAC4 soap_get_ns__get_drive_numberResponse(struct soap*, struct ns__get_drive_numberResponse *, const char*, const char*);

inline int soap_read_ns__get_drive_numberResponse(struct soap *soap, struct ns__get_drive_numberResponse *p)
{
	if (p)
	{	::soap_default_ns__get_drive_numberResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_drive_numberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_drive_numberResponse(struct soap *soap, const char *URL, struct ns__get_drive_numberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_drive_numberResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_drive_numberResponse(struct soap *soap, struct ns__get_drive_numberResponse *p)
{
	if (::soap_read_ns__get_drive_numberResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_free_DEFINED
#define SOAP_TYPE_ns__get_memory_free_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_free(struct soap*, struct ns__get_memory_free *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_free(struct soap*, const struct ns__get_memory_free *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_free(struct soap*, const char*, int, const struct ns__get_memory_free *, const char*);
SOAP_FMAC3 struct ns__get_memory_free * SOAP_FMAC4 soap_in_ns__get_memory_free(struct soap*, const char*, struct ns__get_memory_free *, const char*);
SOAP_FMAC1 struct ns__get_memory_free * SOAP_FMAC2 soap_instantiate_ns__get_memory_free(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_free * soap_new_ns__get_memory_free(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_free(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_free * soap_new_req_ns__get_memory_free(
	struct soap *soap)
{
	struct ns__get_memory_free *_p = ::soap_new_ns__get_memory_free(soap);
	if (_p)
	{	::soap_default_ns__get_memory_free(soap, _p);
	}
	return _p;
}

inline struct ns__get_memory_free * soap_new_set_ns__get_memory_free(
	struct soap *soap)
{
	struct ns__get_memory_free *_p = ::soap_new_ns__get_memory_free(soap);
	if (_p)
	{	::soap_default_ns__get_memory_free(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_free(struct soap*, const struct ns__get_memory_free *, const char*, const char*);

inline int soap_write_ns__get_memory_free(struct soap *soap, struct ns__get_memory_free const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_free(soap, p), 0) || ::soap_put_ns__get_memory_free(soap, p, "ns:get-memory-free", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_free(struct soap *soap, const char *URL, struct ns__get_memory_free const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_free(soap, p), 0) || ::soap_put_ns__get_memory_free(soap, p, "ns:get-memory-free", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_free(struct soap *soap, const char *URL, struct ns__get_memory_free const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_free(soap, p), 0) || ::soap_put_ns__get_memory_free(soap, p, "ns:get-memory-free", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_free(struct soap *soap, const char *URL, struct ns__get_memory_free const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_free(soap, p), 0) || ::soap_put_ns__get_memory_free(soap, p, "ns:get-memory-free", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_free * SOAP_FMAC4 soap_get_ns__get_memory_free(struct soap*, struct ns__get_memory_free *, const char*, const char*);

inline int soap_read_ns__get_memory_free(struct soap *soap, struct ns__get_memory_free *p)
{
	if (p)
	{	::soap_default_ns__get_memory_free(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_free(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_free(struct soap *soap, const char *URL, struct ns__get_memory_free *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_free(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_free(struct soap *soap, struct ns__get_memory_free *p)
{
	if (::soap_read_ns__get_memory_free(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_freeResponse_DEFINED
#define SOAP_TYPE_ns__get_memory_freeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_freeResponse(struct soap*, struct ns__get_memory_freeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_freeResponse(struct soap*, const struct ns__get_memory_freeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_freeResponse(struct soap*, const char*, int, const struct ns__get_memory_freeResponse *, const char*);
SOAP_FMAC3 struct ns__get_memory_freeResponse * SOAP_FMAC4 soap_in_ns__get_memory_freeResponse(struct soap*, const char*, struct ns__get_memory_freeResponse *, const char*);
SOAP_FMAC1 struct ns__get_memory_freeResponse * SOAP_FMAC2 soap_instantiate_ns__get_memory_freeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_freeResponse * soap_new_ns__get_memory_freeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_freeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_freeResponse * soap_new_req_ns__get_memory_freeResponse(
	struct soap *soap,
	int free)
{
	struct ns__get_memory_freeResponse *_p = ::soap_new_ns__get_memory_freeResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_freeResponse(soap, _p);
		_p->free = free;
	}
	return _p;
}

inline struct ns__get_memory_freeResponse * soap_new_set_ns__get_memory_freeResponse(
	struct soap *soap,
	int free)
{
	struct ns__get_memory_freeResponse *_p = ::soap_new_ns__get_memory_freeResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_freeResponse(soap, _p);
		_p->free = free;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_freeResponse(struct soap*, const struct ns__get_memory_freeResponse *, const char*, const char*);

inline int soap_write_ns__get_memory_freeResponse(struct soap *soap, struct ns__get_memory_freeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_freeResponse(soap, p), 0) || ::soap_put_ns__get_memory_freeResponse(soap, p, "ns:get-memory-freeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_freeResponse(struct soap *soap, const char *URL, struct ns__get_memory_freeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_freeResponse(soap, p), 0) || ::soap_put_ns__get_memory_freeResponse(soap, p, "ns:get-memory-freeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_freeResponse(struct soap *soap, const char *URL, struct ns__get_memory_freeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_freeResponse(soap, p), 0) || ::soap_put_ns__get_memory_freeResponse(soap, p, "ns:get-memory-freeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_freeResponse(struct soap *soap, const char *URL, struct ns__get_memory_freeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_freeResponse(soap, p), 0) || ::soap_put_ns__get_memory_freeResponse(soap, p, "ns:get-memory-freeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_freeResponse * SOAP_FMAC4 soap_get_ns__get_memory_freeResponse(struct soap*, struct ns__get_memory_freeResponse *, const char*, const char*);

inline int soap_read_ns__get_memory_freeResponse(struct soap *soap, struct ns__get_memory_freeResponse *p)
{
	if (p)
	{	::soap_default_ns__get_memory_freeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_freeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_freeResponse(struct soap *soap, const char *URL, struct ns__get_memory_freeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_freeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_freeResponse(struct soap *soap, struct ns__get_memory_freeResponse *p)
{
	if (::soap_read_ns__get_memory_freeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_available_DEFINED
#define SOAP_TYPE_ns__get_memory_available_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_available(struct soap*, struct ns__get_memory_available *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_available(struct soap*, const struct ns__get_memory_available *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_available(struct soap*, const char*, int, const struct ns__get_memory_available *, const char*);
SOAP_FMAC3 struct ns__get_memory_available * SOAP_FMAC4 soap_in_ns__get_memory_available(struct soap*, const char*, struct ns__get_memory_available *, const char*);
SOAP_FMAC1 struct ns__get_memory_available * SOAP_FMAC2 soap_instantiate_ns__get_memory_available(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_available * soap_new_ns__get_memory_available(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_available(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_available * soap_new_req_ns__get_memory_available(
	struct soap *soap)
{
	struct ns__get_memory_available *_p = ::soap_new_ns__get_memory_available(soap);
	if (_p)
	{	::soap_default_ns__get_memory_available(soap, _p);
	}
	return _p;
}

inline struct ns__get_memory_available * soap_new_set_ns__get_memory_available(
	struct soap *soap)
{
	struct ns__get_memory_available *_p = ::soap_new_ns__get_memory_available(soap);
	if (_p)
	{	::soap_default_ns__get_memory_available(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_available(struct soap*, const struct ns__get_memory_available *, const char*, const char*);

inline int soap_write_ns__get_memory_available(struct soap *soap, struct ns__get_memory_available const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_available(soap, p), 0) || ::soap_put_ns__get_memory_available(soap, p, "ns:get-memory-available", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_available(struct soap *soap, const char *URL, struct ns__get_memory_available const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_available(soap, p), 0) || ::soap_put_ns__get_memory_available(soap, p, "ns:get-memory-available", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_available(struct soap *soap, const char *URL, struct ns__get_memory_available const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_available(soap, p), 0) || ::soap_put_ns__get_memory_available(soap, p, "ns:get-memory-available", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_available(struct soap *soap, const char *URL, struct ns__get_memory_available const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_available(soap, p), 0) || ::soap_put_ns__get_memory_available(soap, p, "ns:get-memory-available", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_available * SOAP_FMAC4 soap_get_ns__get_memory_available(struct soap*, struct ns__get_memory_available *, const char*, const char*);

inline int soap_read_ns__get_memory_available(struct soap *soap, struct ns__get_memory_available *p)
{
	if (p)
	{	::soap_default_ns__get_memory_available(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_available(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_available(struct soap *soap, const char *URL, struct ns__get_memory_available *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_available(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_available(struct soap *soap, struct ns__get_memory_available *p)
{
	if (::soap_read_ns__get_memory_available(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_availableResponse_DEFINED
#define SOAP_TYPE_ns__get_memory_availableResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_availableResponse(struct soap*, struct ns__get_memory_availableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_availableResponse(struct soap*, const struct ns__get_memory_availableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_availableResponse(struct soap*, const char*, int, const struct ns__get_memory_availableResponse *, const char*);
SOAP_FMAC3 struct ns__get_memory_availableResponse * SOAP_FMAC4 soap_in_ns__get_memory_availableResponse(struct soap*, const char*, struct ns__get_memory_availableResponse *, const char*);
SOAP_FMAC1 struct ns__get_memory_availableResponse * SOAP_FMAC2 soap_instantiate_ns__get_memory_availableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_availableResponse * soap_new_ns__get_memory_availableResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_availableResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_availableResponse * soap_new_req_ns__get_memory_availableResponse(
	struct soap *soap,
	int available)
{
	struct ns__get_memory_availableResponse *_p = ::soap_new_ns__get_memory_availableResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_availableResponse(soap, _p);
		_p->available = available;
	}
	return _p;
}

inline struct ns__get_memory_availableResponse * soap_new_set_ns__get_memory_availableResponse(
	struct soap *soap,
	int available)
{
	struct ns__get_memory_availableResponse *_p = ::soap_new_ns__get_memory_availableResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_availableResponse(soap, _p);
		_p->available = available;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_availableResponse(struct soap*, const struct ns__get_memory_availableResponse *, const char*, const char*);

inline int soap_write_ns__get_memory_availableResponse(struct soap *soap, struct ns__get_memory_availableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_availableResponse(soap, p), 0) || ::soap_put_ns__get_memory_availableResponse(soap, p, "ns:get-memory-availableResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_availableResponse(struct soap *soap, const char *URL, struct ns__get_memory_availableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_availableResponse(soap, p), 0) || ::soap_put_ns__get_memory_availableResponse(soap, p, "ns:get-memory-availableResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_availableResponse(struct soap *soap, const char *URL, struct ns__get_memory_availableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_availableResponse(soap, p), 0) || ::soap_put_ns__get_memory_availableResponse(soap, p, "ns:get-memory-availableResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_availableResponse(struct soap *soap, const char *URL, struct ns__get_memory_availableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_availableResponse(soap, p), 0) || ::soap_put_ns__get_memory_availableResponse(soap, p, "ns:get-memory-availableResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_availableResponse * SOAP_FMAC4 soap_get_ns__get_memory_availableResponse(struct soap*, struct ns__get_memory_availableResponse *, const char*, const char*);

inline int soap_read_ns__get_memory_availableResponse(struct soap *soap, struct ns__get_memory_availableResponse *p)
{
	if (p)
	{	::soap_default_ns__get_memory_availableResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_availableResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_availableResponse(struct soap *soap, const char *URL, struct ns__get_memory_availableResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_availableResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_availableResponse(struct soap *soap, struct ns__get_memory_availableResponse *p)
{
	if (::soap_read_ns__get_memory_availableResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_info_DEFINED
#define SOAP_TYPE_ns__get_memory_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_info(struct soap*, struct ns__get_memory_info *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_info(struct soap*, const struct ns__get_memory_info *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_info(struct soap*, const char*, int, const struct ns__get_memory_info *, const char*);
SOAP_FMAC3 struct ns__get_memory_info * SOAP_FMAC4 soap_in_ns__get_memory_info(struct soap*, const char*, struct ns__get_memory_info *, const char*);
SOAP_FMAC1 struct ns__get_memory_info * SOAP_FMAC2 soap_instantiate_ns__get_memory_info(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_info * soap_new_ns__get_memory_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_info(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_info * soap_new_req_ns__get_memory_info(
	struct soap *soap)
{
	struct ns__get_memory_info *_p = ::soap_new_ns__get_memory_info(soap);
	if (_p)
	{	::soap_default_ns__get_memory_info(soap, _p);
	}
	return _p;
}

inline struct ns__get_memory_info * soap_new_set_ns__get_memory_info(
	struct soap *soap)
{
	struct ns__get_memory_info *_p = ::soap_new_ns__get_memory_info(soap);
	if (_p)
	{	::soap_default_ns__get_memory_info(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_info(struct soap*, const struct ns__get_memory_info *, const char*, const char*);

inline int soap_write_ns__get_memory_info(struct soap *soap, struct ns__get_memory_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_info(soap, p), 0) || ::soap_put_ns__get_memory_info(soap, p, "ns:get-memory-info", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_info(struct soap *soap, const char *URL, struct ns__get_memory_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_info(soap, p), 0) || ::soap_put_ns__get_memory_info(soap, p, "ns:get-memory-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_info(struct soap *soap, const char *URL, struct ns__get_memory_info const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_info(soap, p), 0) || ::soap_put_ns__get_memory_info(soap, p, "ns:get-memory-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_info(struct soap *soap, const char *URL, struct ns__get_memory_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_info(soap, p), 0) || ::soap_put_ns__get_memory_info(soap, p, "ns:get-memory-info", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_info * SOAP_FMAC4 soap_get_ns__get_memory_info(struct soap*, struct ns__get_memory_info *, const char*, const char*);

inline int soap_read_ns__get_memory_info(struct soap *soap, struct ns__get_memory_info *p)
{
	if (p)
	{	::soap_default_ns__get_memory_info(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_info(struct soap *soap, const char *URL, struct ns__get_memory_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_info(struct soap *soap, struct ns__get_memory_info *p)
{
	if (::soap_read_ns__get_memory_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_memory_infoResponse_DEFINED
#define SOAP_TYPE_ns__get_memory_infoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_memory_infoResponse(struct soap*, struct ns__get_memory_infoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_memory_infoResponse(struct soap*, const struct ns__get_memory_infoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_memory_infoResponse(struct soap*, const char*, int, const struct ns__get_memory_infoResponse *, const char*);
SOAP_FMAC3 struct ns__get_memory_infoResponse * SOAP_FMAC4 soap_in_ns__get_memory_infoResponse(struct soap*, const char*, struct ns__get_memory_infoResponse *, const char*);
SOAP_FMAC1 struct ns__get_memory_infoResponse * SOAP_FMAC2 soap_instantiate_ns__get_memory_infoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_memory_infoResponse * soap_new_ns__get_memory_infoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_memory_infoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_memory_infoResponse * soap_new_req_ns__get_memory_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_memory_infoResponse *_p = ::soap_new_ns__get_memory_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}

inline struct ns__get_memory_infoResponse * soap_new_set_ns__get_memory_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_memory_infoResponse *_p = ::soap_new_ns__get_memory_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_memory_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_memory_infoResponse(struct soap*, const struct ns__get_memory_infoResponse *, const char*, const char*);

inline int soap_write_ns__get_memory_infoResponse(struct soap *soap, struct ns__get_memory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_memory_infoResponse(soap, p), 0) || ::soap_put_ns__get_memory_infoResponse(soap, p, "ns:get-memory-infoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_memory_infoResponse(struct soap *soap, const char *URL, struct ns__get_memory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_infoResponse(soap, p), 0) || ::soap_put_ns__get_memory_infoResponse(soap, p, "ns:get-memory-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_memory_infoResponse(struct soap *soap, const char *URL, struct ns__get_memory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_infoResponse(soap, p), 0) || ::soap_put_ns__get_memory_infoResponse(soap, p, "ns:get-memory-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_memory_infoResponse(struct soap *soap, const char *URL, struct ns__get_memory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_memory_infoResponse(soap, p), 0) || ::soap_put_ns__get_memory_infoResponse(soap, p, "ns:get-memory-infoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_memory_infoResponse * SOAP_FMAC4 soap_get_ns__get_memory_infoResponse(struct soap*, struct ns__get_memory_infoResponse *, const char*, const char*);

inline int soap_read_ns__get_memory_infoResponse(struct soap *soap, struct ns__get_memory_infoResponse *p)
{
	if (p)
	{	::soap_default_ns__get_memory_infoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_memory_infoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_memory_infoResponse(struct soap *soap, const char *URL, struct ns__get_memory_infoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_memory_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_memory_infoResponse(struct soap *soap, struct ns__get_memory_infoResponse *p)
{
	if (::soap_read_ns__get_memory_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_cpu_usage_DEFINED
#define SOAP_TYPE_ns__get_cpu_usage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_cpu_usage(struct soap*, struct ns__get_cpu_usage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_cpu_usage(struct soap*, const struct ns__get_cpu_usage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_cpu_usage(struct soap*, const char*, int, const struct ns__get_cpu_usage *, const char*);
SOAP_FMAC3 struct ns__get_cpu_usage * SOAP_FMAC4 soap_in_ns__get_cpu_usage(struct soap*, const char*, struct ns__get_cpu_usage *, const char*);
SOAP_FMAC1 struct ns__get_cpu_usage * SOAP_FMAC2 soap_instantiate_ns__get_cpu_usage(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_cpu_usage * soap_new_ns__get_cpu_usage(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_cpu_usage(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_cpu_usage * soap_new_req_ns__get_cpu_usage(
	struct soap *soap)
{
	struct ns__get_cpu_usage *_p = ::soap_new_ns__get_cpu_usage(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_usage(soap, _p);
	}
	return _p;
}

inline struct ns__get_cpu_usage * soap_new_set_ns__get_cpu_usage(
	struct soap *soap)
{
	struct ns__get_cpu_usage *_p = ::soap_new_ns__get_cpu_usage(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_usage(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_cpu_usage(struct soap*, const struct ns__get_cpu_usage *, const char*, const char*);

inline int soap_write_ns__get_cpu_usage(struct soap *soap, struct ns__get_cpu_usage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_cpu_usage(soap, p), 0) || ::soap_put_ns__get_cpu_usage(soap, p, "ns:get-cpu-usage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_cpu_usage(struct soap *soap, const char *URL, struct ns__get_cpu_usage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usage(soap, p), 0) || ::soap_put_ns__get_cpu_usage(soap, p, "ns:get-cpu-usage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_cpu_usage(struct soap *soap, const char *URL, struct ns__get_cpu_usage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usage(soap, p), 0) || ::soap_put_ns__get_cpu_usage(soap, p, "ns:get-cpu-usage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_cpu_usage(struct soap *soap, const char *URL, struct ns__get_cpu_usage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usage(soap, p), 0) || ::soap_put_ns__get_cpu_usage(soap, p, "ns:get-cpu-usage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_cpu_usage * SOAP_FMAC4 soap_get_ns__get_cpu_usage(struct soap*, struct ns__get_cpu_usage *, const char*, const char*);

inline int soap_read_ns__get_cpu_usage(struct soap *soap, struct ns__get_cpu_usage *p)
{
	if (p)
	{	::soap_default_ns__get_cpu_usage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_cpu_usage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_cpu_usage(struct soap *soap, const char *URL, struct ns__get_cpu_usage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_cpu_usage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_cpu_usage(struct soap *soap, struct ns__get_cpu_usage *p)
{
	if (::soap_read_ns__get_cpu_usage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_cpu_usageResponse_DEFINED
#define SOAP_TYPE_ns__get_cpu_usageResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_cpu_usageResponse(struct soap*, struct ns__get_cpu_usageResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_cpu_usageResponse(struct soap*, const struct ns__get_cpu_usageResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_cpu_usageResponse(struct soap*, const char*, int, const struct ns__get_cpu_usageResponse *, const char*);
SOAP_FMAC3 struct ns__get_cpu_usageResponse * SOAP_FMAC4 soap_in_ns__get_cpu_usageResponse(struct soap*, const char*, struct ns__get_cpu_usageResponse *, const char*);
SOAP_FMAC1 struct ns__get_cpu_usageResponse * SOAP_FMAC2 soap_instantiate_ns__get_cpu_usageResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_cpu_usageResponse * soap_new_ns__get_cpu_usageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_cpu_usageResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_cpu_usageResponse * soap_new_req_ns__get_cpu_usageResponse(
	struct soap *soap,
	float usage)
{
	struct ns__get_cpu_usageResponse *_p = ::soap_new_ns__get_cpu_usageResponse(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_usageResponse(soap, _p);
		_p->usage = usage;
	}
	return _p;
}

inline struct ns__get_cpu_usageResponse * soap_new_set_ns__get_cpu_usageResponse(
	struct soap *soap,
	float usage)
{
	struct ns__get_cpu_usageResponse *_p = ::soap_new_ns__get_cpu_usageResponse(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_usageResponse(soap, _p);
		_p->usage = usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_cpu_usageResponse(struct soap*, const struct ns__get_cpu_usageResponse *, const char*, const char*);

inline int soap_write_ns__get_cpu_usageResponse(struct soap *soap, struct ns__get_cpu_usageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_cpu_usageResponse(soap, p), 0) || ::soap_put_ns__get_cpu_usageResponse(soap, p, "ns:get-cpu-usageResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_cpu_usageResponse(struct soap *soap, const char *URL, struct ns__get_cpu_usageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usageResponse(soap, p), 0) || ::soap_put_ns__get_cpu_usageResponse(soap, p, "ns:get-cpu-usageResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_cpu_usageResponse(struct soap *soap, const char *URL, struct ns__get_cpu_usageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usageResponse(soap, p), 0) || ::soap_put_ns__get_cpu_usageResponse(soap, p, "ns:get-cpu-usageResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_cpu_usageResponse(struct soap *soap, const char *URL, struct ns__get_cpu_usageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_usageResponse(soap, p), 0) || ::soap_put_ns__get_cpu_usageResponse(soap, p, "ns:get-cpu-usageResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_cpu_usageResponse * SOAP_FMAC4 soap_get_ns__get_cpu_usageResponse(struct soap*, struct ns__get_cpu_usageResponse *, const char*, const char*);

inline int soap_read_ns__get_cpu_usageResponse(struct soap *soap, struct ns__get_cpu_usageResponse *p)
{
	if (p)
	{	::soap_default_ns__get_cpu_usageResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_cpu_usageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_cpu_usageResponse(struct soap *soap, const char *URL, struct ns__get_cpu_usageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_cpu_usageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_cpu_usageResponse(struct soap *soap, struct ns__get_cpu_usageResponse *p)
{
	if (::soap_read_ns__get_cpu_usageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_cpu_info_DEFINED
#define SOAP_TYPE_ns__get_cpu_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_cpu_info(struct soap*, struct ns__get_cpu_info *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_cpu_info(struct soap*, const struct ns__get_cpu_info *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_cpu_info(struct soap*, const char*, int, const struct ns__get_cpu_info *, const char*);
SOAP_FMAC3 struct ns__get_cpu_info * SOAP_FMAC4 soap_in_ns__get_cpu_info(struct soap*, const char*, struct ns__get_cpu_info *, const char*);
SOAP_FMAC1 struct ns__get_cpu_info * SOAP_FMAC2 soap_instantiate_ns__get_cpu_info(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_cpu_info * soap_new_ns__get_cpu_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_cpu_info(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_cpu_info * soap_new_req_ns__get_cpu_info(
	struct soap *soap)
{
	struct ns__get_cpu_info *_p = ::soap_new_ns__get_cpu_info(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_info(soap, _p);
	}
	return _p;
}

inline struct ns__get_cpu_info * soap_new_set_ns__get_cpu_info(
	struct soap *soap)
{
	struct ns__get_cpu_info *_p = ::soap_new_ns__get_cpu_info(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_info(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_cpu_info(struct soap*, const struct ns__get_cpu_info *, const char*, const char*);

inline int soap_write_ns__get_cpu_info(struct soap *soap, struct ns__get_cpu_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_cpu_info(soap, p), 0) || ::soap_put_ns__get_cpu_info(soap, p, "ns:get-cpu-info", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_cpu_info(struct soap *soap, const char *URL, struct ns__get_cpu_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_info(soap, p), 0) || ::soap_put_ns__get_cpu_info(soap, p, "ns:get-cpu-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_cpu_info(struct soap *soap, const char *URL, struct ns__get_cpu_info const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_info(soap, p), 0) || ::soap_put_ns__get_cpu_info(soap, p, "ns:get-cpu-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_cpu_info(struct soap *soap, const char *URL, struct ns__get_cpu_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_info(soap, p), 0) || ::soap_put_ns__get_cpu_info(soap, p, "ns:get-cpu-info", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_cpu_info * SOAP_FMAC4 soap_get_ns__get_cpu_info(struct soap*, struct ns__get_cpu_info *, const char*, const char*);

inline int soap_read_ns__get_cpu_info(struct soap *soap, struct ns__get_cpu_info *p)
{
	if (p)
	{	::soap_default_ns__get_cpu_info(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_cpu_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_cpu_info(struct soap *soap, const char *URL, struct ns__get_cpu_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_cpu_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_cpu_info(struct soap *soap, struct ns__get_cpu_info *p)
{
	if (::soap_read_ns__get_cpu_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__get_cpu_infoResponse_DEFINED
#define SOAP_TYPE_ns__get_cpu_infoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__get_cpu_infoResponse(struct soap*, struct ns__get_cpu_infoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__get_cpu_infoResponse(struct soap*, const struct ns__get_cpu_infoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__get_cpu_infoResponse(struct soap*, const char*, int, const struct ns__get_cpu_infoResponse *, const char*);
SOAP_FMAC3 struct ns__get_cpu_infoResponse * SOAP_FMAC4 soap_in_ns__get_cpu_infoResponse(struct soap*, const char*, struct ns__get_cpu_infoResponse *, const char*);
SOAP_FMAC1 struct ns__get_cpu_infoResponse * SOAP_FMAC2 soap_instantiate_ns__get_cpu_infoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__get_cpu_infoResponse * soap_new_ns__get_cpu_infoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__get_cpu_infoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__get_cpu_infoResponse * soap_new_req_ns__get_cpu_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_cpu_infoResponse *_p = ::soap_new_ns__get_cpu_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}

inline struct ns__get_cpu_infoResponse * soap_new_set_ns__get_cpu_infoResponse(
	struct soap *soap,
	const std::string& info)
{
	struct ns__get_cpu_infoResponse *_p = ::soap_new_ns__get_cpu_infoResponse(soap);
	if (_p)
	{	::soap_default_ns__get_cpu_infoResponse(soap, _p);
		_p->info = info;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__get_cpu_infoResponse(struct soap*, const struct ns__get_cpu_infoResponse *, const char*, const char*);

inline int soap_write_ns__get_cpu_infoResponse(struct soap *soap, struct ns__get_cpu_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__get_cpu_infoResponse(soap, p), 0) || ::soap_put_ns__get_cpu_infoResponse(soap, p, "ns:get-cpu-infoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__get_cpu_infoResponse(struct soap *soap, const char *URL, struct ns__get_cpu_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_infoResponse(soap, p), 0) || ::soap_put_ns__get_cpu_infoResponse(soap, p, "ns:get-cpu-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__get_cpu_infoResponse(struct soap *soap, const char *URL, struct ns__get_cpu_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_infoResponse(soap, p), 0) || ::soap_put_ns__get_cpu_infoResponse(soap, p, "ns:get-cpu-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__get_cpu_infoResponse(struct soap *soap, const char *URL, struct ns__get_cpu_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__get_cpu_infoResponse(soap, p), 0) || ::soap_put_ns__get_cpu_infoResponse(soap, p, "ns:get-cpu-infoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__get_cpu_infoResponse * SOAP_FMAC4 soap_get_ns__get_cpu_infoResponse(struct soap*, struct ns__get_cpu_infoResponse *, const char*, const char*);

inline int soap_read_ns__get_cpu_infoResponse(struct soap *soap, struct ns__get_cpu_infoResponse *p)
{
	if (p)
	{	::soap_default_ns__get_cpu_infoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__get_cpu_infoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__get_cpu_infoResponse(struct soap *soap, const char *URL, struct ns__get_cpu_infoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__get_cpu_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__get_cpu_infoResponse(struct soap *soap, struct ns__get_cpu_infoResponse *p)
{
	if (::soap_read_ns__get_cpu_infoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
