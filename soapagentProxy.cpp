/* soapagentProxy.cpp
   Generated by gSOAP 2.8.98 for soapAgentServer.hpp

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapagentProxy.h"

agentProxy::agentProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	agentProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

agentProxy::agentProxy(const agentProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

agentProxy::agentProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	agentProxy_init(_soap->imode, _soap->omode);
}

agentProxy::agentProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	agentProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

agentProxy::agentProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	agentProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

agentProxy::agentProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	agentProxy_init(iomode, iomode);
}

agentProxy::agentProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	agentProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

agentProxy::agentProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	agentProxy_init(imode, omode);
}

agentProxy::~agentProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void agentProxy::agentProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns", "http://tempuri.org/ns.xsd", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

agentProxy *agentProxy::copy()
{	agentProxy *dup = SOAP_NEW_UNMANAGED(agentProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

agentProxy& agentProxy::operator=(const agentProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void agentProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void agentProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	agentProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void agentProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *agentProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *agentProxy::soap_fault()
{	return this->soap->fault;
}

const char *agentProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *agentProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *agentProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int agentProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int agentProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void agentProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void agentProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *agentProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int agentProxy::send_get_cpu_info(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_cpu_info soap_tmp_ns__get_cpu_info;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info, "ns:get-cpu-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_info(soap, &soap_tmp_ns__get_cpu_info, "ns:get-cpu-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_cpu_info(std::string &info)
{
	struct ns__get_cpu_infoResponse *soap_tmp_ns__get_cpu_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_cpu_infoResponse = soap_get_ns__get_cpu_infoResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_cpu_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_cpu_infoResponse->info;
	return soap_closesock(soap);
}

int agentProxy::send_get_cpu_usage(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_cpu_usage soap_tmp_ns__get_cpu_usage;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage, "ns:get-cpu-usage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_cpu_usage(soap, &soap_tmp_ns__get_cpu_usage, "ns:get-cpu-usage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_cpu_usage(float &usage)
{
	struct ns__get_cpu_usageResponse *soap_tmp_ns__get_cpu_usageResponse;
	soap_default_float(soap, &usage);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_cpu_usageResponse = soap_get_ns__get_cpu_usageResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_cpu_usageResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	usage = soap_tmp_ns__get_cpu_usageResponse->usage;
	return soap_closesock(soap);
}

int agentProxy::send_get_memory_info(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_memory_info soap_tmp_ns__get_memory_info;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info, "ns:get-memory-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_info(soap, &soap_tmp_ns__get_memory_info, "ns:get-memory-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_memory_info(std::string &info)
{
	struct ns__get_memory_infoResponse *soap_tmp_ns__get_memory_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_memory_infoResponse = soap_get_ns__get_memory_infoResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_memory_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_memory_infoResponse->info;
	return soap_closesock(soap);
}

int agentProxy::send_get_memory_available(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_memory_available soap_tmp_ns__get_memory_available;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available, "ns:get-memory-available", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_available(soap, &soap_tmp_ns__get_memory_available, "ns:get-memory-available", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_memory_available(int &available)
{
	struct ns__get_memory_availableResponse *soap_tmp_ns__get_memory_availableResponse;
	soap_default_int(soap, &available);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_memory_availableResponse = soap_get_ns__get_memory_availableResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_memory_availableResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	available = soap_tmp_ns__get_memory_availableResponse->available;
	return soap_closesock(soap);
}

int agentProxy::send_get_memory_free(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_memory_free soap_tmp_ns__get_memory_free;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free, "ns:get-memory-free", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_memory_free(soap, &soap_tmp_ns__get_memory_free, "ns:get-memory-free", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_memory_free(int &free)
{
	struct ns__get_memory_freeResponse *soap_tmp_ns__get_memory_freeResponse;
	soap_default_int(soap, &free);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_memory_freeResponse = soap_get_ns__get_memory_freeResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_memory_freeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	free = soap_tmp_ns__get_memory_freeResponse->free;
	return soap_closesock(soap);
}

int agentProxy::send_get_drive_number(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_drive_number soap_tmp_ns__get_drive_number;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number, "ns:get-drive-number", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_number(soap, &soap_tmp_ns__get_drive_number, "ns:get-drive-number", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_drive_number(unsigned int &number)
{
	struct ns__get_drive_numberResponse *soap_tmp_ns__get_drive_numberResponse;
	soap_default_unsignedInt(soap, &number);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_drive_numberResponse = soap_get_ns__get_drive_numberResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_drive_numberResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	number = soap_tmp_ns__get_drive_numberResponse->number;
	return soap_closesock(soap);
}

int agentProxy::send_get_drive_names(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_drive_names soap_tmp_ns__get_drive_names;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names, "ns:get-drive-names", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_names(soap, &soap_tmp_ns__get_drive_names, "ns:get-drive-names", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_drive_names(std::string *names)
{
	struct ns__get_drive_namesResponse *soap_tmp_ns__get_drive_namesResponse;
	if (!names)
		return soap_closesock(soap);
	soap_default_std__string(soap, names);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_drive_namesResponse = soap_get_ns__get_drive_namesResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_drive_namesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (names && soap_tmp_ns__get_drive_namesResponse->names)
		*names = *soap_tmp_ns__get_drive_namesResponse->names;
	return soap_closesock(soap);
}

int agentProxy::send_get_drive_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_drive_info soap_tmp_ns__get_drive_info;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_drive_info.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info, "ns:get-drive-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_info(soap, &soap_tmp_ns__get_drive_info, "ns:get-drive-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_drive_info(std::string &info)
{
	struct ns__get_drive_infoResponse *soap_tmp_ns__get_drive_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_drive_infoResponse = soap_get_ns__get_drive_infoResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_drive_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_drive_infoResponse->info;
	return soap_closesock(soap);
}

int agentProxy::send_get_drive_total_capacity(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_drive_total_capacity soap_tmp_ns__get_drive_total_capacity;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_drive_total_capacity.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity, "ns:get-drive-total-capacity", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_total_capacity(soap, &soap_tmp_ns__get_drive_total_capacity, "ns:get-drive-total-capacity", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_drive_total_capacity(float &total)
{
	struct ns__get_drive_total_capacityResponse *soap_tmp_ns__get_drive_total_capacityResponse;
	soap_default_float(soap, &total);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_drive_total_capacityResponse = soap_get_ns__get_drive_total_capacityResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_drive_total_capacityResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	total = soap_tmp_ns__get_drive_total_capacityResponse->total;
	return soap_closesock(soap);
}

int agentProxy::send_get_drive_used_capatity(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_drive_used_capatity soap_tmp_ns__get_drive_used_capatity;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_drive_used_capatity.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity, "ns:get-drive-used-capatity", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_drive_used_capatity(soap, &soap_tmp_ns__get_drive_used_capatity, "ns:get-drive-used-capatity", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_drive_used_capatity(float &usage)
{
	struct ns__get_drive_used_capatityResponse *soap_tmp_ns__get_drive_used_capatityResponse;
	soap_default_float(soap, &usage);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_drive_used_capatityResponse = soap_get_ns__get_drive_used_capatityResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_drive_used_capatityResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	usage = soap_tmp_ns__get_drive_used_capatityResponse->usage;
	return soap_closesock(soap);
}

int agentProxy::send_get_interface_number(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_interface_number soap_tmp_ns__get_interface_number;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number, "ns:get-interface-number", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_number(soap, &soap_tmp_ns__get_interface_number, "ns:get-interface-number", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_interface_number(unsigned int &number)
{
	struct ns__get_interface_numberResponse *soap_tmp_ns__get_interface_numberResponse;
	soap_default_unsignedInt(soap, &number);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_interface_numberResponse = soap_get_ns__get_interface_numberResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_interface_numberResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	number = soap_tmp_ns__get_interface_numberResponse->number;
	return soap_closesock(soap);
}

int agentProxy::send_get_interface_names(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns__get_interface_names soap_tmp_ns__get_interface_names;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names, "ns:get-interface-names", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_names(soap, &soap_tmp_ns__get_interface_names, "ns:get-interface-names", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_interface_names(std::string *names)
{
	struct ns__get_interface_namesResponse *soap_tmp_ns__get_interface_namesResponse;
	if (!names)
		return soap_closesock(soap);
	soap_default_std__string(soap, names);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_interface_namesResponse = soap_get_ns__get_interface_namesResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_interface_namesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (names && soap_tmp_ns__get_interface_namesResponse->names)
		*names = *soap_tmp_ns__get_interface_namesResponse->names;
	return soap_closesock(soap);
}

int agentProxy::send_get_interface_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_interface_info soap_tmp_ns__get_interface_info;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_interface_info.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info, "ns:get-interface-info", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_info(soap, &soap_tmp_ns__get_interface_info, "ns:get-interface-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_interface_info(std::string &info)
{
	struct ns__get_interface_infoResponse *soap_tmp_ns__get_interface_infoResponse;
	soap_default_std__string(soap, &info);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_interface_infoResponse = soap_get_ns__get_interface_infoResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_interface_infoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	info = soap_tmp_ns__get_interface_infoResponse->info;
	return soap_closesock(soap);
}

int agentProxy::send_get_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_interface_ip_address soap_tmp_ns__get_interface_ip_address;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_interface_ip_address.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address, "ns:get-interface-ip-address", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_ip_address(soap, &soap_tmp_ns__get_interface_ip_address, "ns:get-interface-ip-address", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_interface_ip_address(std::string &ip_address)
{
	struct ns__get_interface_ip_addressResponse *soap_tmp_ns__get_interface_ip_addressResponse;
	soap_default_std__string(soap, &ip_address);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_interface_ip_addressResponse = soap_get_ns__get_interface_ip_addressResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_interface_ip_addressResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ip_address = soap_tmp_ns__get_interface_ip_addressResponse->ip_address;
	return soap_closesock(soap);
}

int agentProxy::send_get_interface_speed(const char *soap_endpoint_url, const char *soap_action, const std::string& name)
{
	struct ns__get_interface_speed soap_tmp_ns__get_interface_speed;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__get_interface_speed.name = name;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed, "ns:get-interface-speed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_interface_speed(soap, &soap_tmp_ns__get_interface_speed, "ns:get-interface-speed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_get_interface_speed(int &speed)
{
	struct ns__get_interface_speedResponse *soap_tmp_ns__get_interface_speedResponse;
	soap_default_int(soap, &speed);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_interface_speedResponse = soap_get_ns__get_interface_speedResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__get_interface_speedResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	speed = soap_tmp_ns__get_interface_speedResponse->speed;
	return soap_closesock(soap);
}

int agentProxy::send_set_hostname(const char *soap_endpoint_url, const char *soap_action, const std::string& hostname)
{
	struct ns__set_hostname soap_tmp_ns__set_hostname;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__set_hostname.hostname = hostname;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__set_hostname(soap, &soap_tmp_ns__set_hostname);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__set_hostname(soap, &soap_tmp_ns__set_hostname, "ns:set-hostname", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__set_hostname(soap, &soap_tmp_ns__set_hostname, "ns:set-hostname", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_set_hostname(struct ns__set_hostname& tmp)
{
	struct ns__set_hostname *_param_1 = &tmp;
	soap_default_ns__set_hostname(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__set_hostname(soap, _param_1, "ns:set-hostname", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int agentProxy::send_set_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name, const std::string& ip_address, const std::string& subnet_mask)
{
	struct ns__set_interface_ip_address soap_tmp_ns__set_interface_ip_address;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	soap_tmp_ns__set_interface_ip_address.name = name;
	soap_tmp_ns__set_interface_ip_address.ip_address = ip_address;
	soap_tmp_ns__set_interface_ip_address.subnet_mask = subnet_mask;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address, "ns:set-interface-ip-address", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__set_interface_ip_address(soap, &soap_tmp_ns__set_interface_ip_address, "ns:set-interface-ip-address", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int agentProxy::recv_set_interface_ip_address(struct ns__set_interface_ip_address& tmp)
{
	struct ns__set_interface_ip_address *_param_1 = &tmp;
	soap_default_ns__set_interface_ip_address(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns__set_interface_ip_address(soap, _param_1, "ns:set-interface-ip-address", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
