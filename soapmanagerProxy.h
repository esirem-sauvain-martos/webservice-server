/* soapmanagerProxy.h
   Generated by gSOAP 2.8.98 for networkManagement.hpp

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapmanagerProxy_H
#define soapmanagerProxy_H
#include "soapH.h"

    class SOAP_CMAC managerProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'managerProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in networkManagement.hpp, if any
        /// Construct a proxy with new managing context
        managerProxy();
        /// Copy constructor
        managerProxy(const managerProxy& rhs);
        /// Construct proxy given a shared managing context
        managerProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        managerProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        managerProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        managerProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        managerProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        managerProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~managerProxy();
        /// Initializer used by constructors
        virtual void managerProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual managerProxy *copy();
        /// Copy assignment
        managerProxy& operator=(const managerProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'get-cpu-info' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_cpu_info(std::string &info) { return this->get_cpu_info(NULL, NULL, info); }
        /// Web service synchronous operation 'get-cpu-info' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_cpu_info(const char *soap_endpoint_url, const char *soap_action, std::string &info) { return this->send_get_cpu_info(soap_endpoint_url, soap_action) || this->recv_get_cpu_info(info) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-cpu-info' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_cpu_info(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-cpu-info' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_cpu_info(std::string &info);
        //
        /// Web service synchronous operation 'get-cpu-usage' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_cpu_usage(float &usage) { return this->get_cpu_usage(NULL, NULL, usage); }
        /// Web service synchronous operation 'get-cpu-usage' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_cpu_usage(const char *soap_endpoint_url, const char *soap_action, float &usage) { return this->send_get_cpu_usage(soap_endpoint_url, soap_action) || this->recv_get_cpu_usage(usage) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-cpu-usage' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_cpu_usage(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-cpu-usage' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_cpu_usage(float &usage);
        //
        /// Web service synchronous operation 'get-memory-info' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_info(std::string &info) { return this->get_memory_info(NULL, NULL, info); }
        /// Web service synchronous operation 'get-memory-info' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_info(const char *soap_endpoint_url, const char *soap_action, std::string &info) { return this->send_get_memory_info(soap_endpoint_url, soap_action) || this->recv_get_memory_info(info) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-memory-info' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_memory_info(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-memory-info' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_memory_info(std::string &info);
        //
        /// Web service synchronous operation 'get-memory-available' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_available(int &available) { return this->get_memory_available(NULL, NULL, available); }
        /// Web service synchronous operation 'get-memory-available' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_available(const char *soap_endpoint_url, const char *soap_action, int &available) { return this->send_get_memory_available(soap_endpoint_url, soap_action) || this->recv_get_memory_available(available) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-memory-available' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_memory_available(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-memory-available' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_memory_available(int &available);
        //
        /// Web service synchronous operation 'get-memory-free' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_free(int &free) { return this->get_memory_free(NULL, NULL, free); }
        /// Web service synchronous operation 'get-memory-free' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_memory_free(const char *soap_endpoint_url, const char *soap_action, int &free) { return this->send_get_memory_free(soap_endpoint_url, soap_action) || this->recv_get_memory_free(free) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-memory-free' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_memory_free(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-memory-free' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_memory_free(int &free);
        //
        /// Web service synchronous operation 'get-drive-number' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_number(unsigned int &number) { return this->get_drive_number(NULL, NULL, number); }
        /// Web service synchronous operation 'get-drive-number' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_number(const char *soap_endpoint_url, const char *soap_action, unsigned int &number) { return this->send_get_drive_number(soap_endpoint_url, soap_action) || this->recv_get_drive_number(number) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-drive-number' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_drive_number(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-drive-number' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_drive_number(unsigned int &number);
        //
        /// Web service synchronous operation 'get-drive-names' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_names(std::string *names) { return this->get_drive_names(NULL, NULL, names); }
        /// Web service synchronous operation 'get-drive-names' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_names(const char *soap_endpoint_url, const char *soap_action, std::string *names) { return this->send_get_drive_names(soap_endpoint_url, soap_action) || this->recv_get_drive_names(names) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-drive-names' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_drive_names(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-drive-names' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_drive_names(std::string *names);
        //
        /// Web service synchronous operation 'get-drive-info' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_info(const std::string& name, std::string &info) { return this->get_drive_info(NULL, NULL, name, info); }
        /// Web service synchronous operation 'get-drive-info' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name, std::string &info) { return this->send_get_drive_info(soap_endpoint_url, soap_action, name) || this->recv_get_drive_info(info) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-drive-info' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_drive_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-drive-info' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_drive_info(std::string &info);
        //
        /// Web service synchronous operation 'get-drive-total-capacity' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_total_capacity(const std::string& name, float &total) { return this->get_drive_total_capacity(NULL, NULL, name, total); }
        /// Web service synchronous operation 'get-drive-total-capacity' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_total_capacity(const char *soap_endpoint_url, const char *soap_action, const std::string& name, float &total) { return this->send_get_drive_total_capacity(soap_endpoint_url, soap_action, name) || this->recv_get_drive_total_capacity(total) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-drive-total-capacity' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_drive_total_capacity(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-drive-total-capacity' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_drive_total_capacity(float &total);
        //
        /// Web service synchronous operation 'get-drive-used-capatity' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_used_capatity(const std::string& name, float &usage) { return this->get_drive_used_capatity(NULL, NULL, name, usage); }
        /// Web service synchronous operation 'get-drive-used-capatity' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_drive_used_capatity(const char *soap_endpoint_url, const char *soap_action, const std::string& name, float &usage) { return this->send_get_drive_used_capatity(soap_endpoint_url, soap_action, name) || this->recv_get_drive_used_capatity(usage) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-drive-used-capatity' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_drive_used_capatity(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-drive-used-capatity' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_drive_used_capatity(float &usage);
        //
        /// Web service synchronous operation 'get-interface-number' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_number(unsigned int &number) { return this->get_interface_number(NULL, NULL, number); }
        /// Web service synchronous operation 'get-interface-number' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_number(const char *soap_endpoint_url, const char *soap_action, unsigned int &number) { return this->send_get_interface_number(soap_endpoint_url, soap_action) || this->recv_get_interface_number(number) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-interface-number' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_interface_number(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-interface-number' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_interface_number(unsigned int &number);
        //
        /// Web service synchronous operation 'get-interface-names' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_names(std::string *names) { return this->get_interface_names(NULL, NULL, names); }
        /// Web service synchronous operation 'get-interface-names' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_names(const char *soap_endpoint_url, const char *soap_action, std::string *names) { return this->send_get_interface_names(soap_endpoint_url, soap_action) || this->recv_get_interface_names(names) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-interface-names' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_interface_names(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_get-interface-names' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_interface_names(std::string *names);
        //
        /// Web service synchronous operation 'get-interface-info' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_info(const std::string& name, std::string &info) { return this->get_interface_info(NULL, NULL, name, info); }
        /// Web service synchronous operation 'get-interface-info' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name, std::string &info) { return this->send_get_interface_info(soap_endpoint_url, soap_action, name) || this->recv_get_interface_info(info) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-interface-info' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_interface_info(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-interface-info' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_interface_info(std::string &info);
        //
        /// Web service synchronous operation 'get-interface-ip-address' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_ip_address(const std::string& name, std::string &ip_address) { return this->get_interface_ip_address(NULL, NULL, name, ip_address); }
        /// Web service synchronous operation 'get-interface-ip-address' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name, std::string &ip_address) { return this->send_get_interface_ip_address(soap_endpoint_url, soap_action, name) || this->recv_get_interface_ip_address(ip_address) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-interface-ip-address' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-interface-ip-address' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_interface_ip_address(std::string &ip_address);
        //
        /// Web service synchronous operation 'get-interface-speed' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_speed(const std::string& name, int &speed) { return this->get_interface_speed(NULL, NULL, name, speed); }
        /// Web service synchronous operation 'get-interface-speed' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int get_interface_speed(const char *soap_endpoint_url, const char *soap_action, const std::string& name, int &speed) { return this->send_get_interface_speed(soap_endpoint_url, soap_action, name) || this->recv_get_interface_speed(speed) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_get-interface-speed' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_get_interface_speed(const char *soap_endpoint_url, const char *soap_action, const std::string& name);
        /// Web service asynchronous operation 'recv_get-interface-speed' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_get_interface_speed(int &speed);
        //
        /// Web service one-way synchronous send operation 'set-hostname' to the default endpoint with the default SOAP Action header then wait for HTTP OK/Accept response, returns SOAP_OK or error code
        virtual int set_hostname(const std::string& hostname) { return this->set_hostname(NULL, NULL, hostname); }
        /// Web service one-way synchronous send operation 'set-hostname' to the specified endpoint and SOAP Action header then wait for HTTP OK/Accept response, returns SOAP_OK or error code
        virtual int set_hostname(const char *soap_endpoint_url, const char *soap_action, const std::string& hostname) { return (this->send_set_hostname(soap_endpoint_url, soap_action, hostname) || soap_recv_empty_response(this->soap)) ? this->soap->error : SOAP_OK; }
        /// Web service one-way asynchronous send operation 'send_set-hostname' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int send_set_hostname(const std::string& hostname) { return this->send_set_hostname(NULL, NULL, hostname); }
        /// Web service one-way asynchronous send operation 'send_set-hostname' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_set_hostname(const char *soap_endpoint_url, const char *soap_action, const std::string& hostname);
        /// Web service one-way asynchronous receive operation 'recv_set-hostname', returns SOAP_OK or error code;
        virtual int recv_set_hostname(struct ns__set_hostname&);
        /// Web service asynchronous receive of HTTP Accept acknowledgment for one-way asynchronous send operation 'send_set-hostname', returns SOAP_OK or error code
        virtual int recv_set_hostname_empty_response() { return soap_recv_empty_response(this->soap); }
        //
        /// Web service one-way synchronous send operation 'set-interface-ip-address' to the default endpoint with the default SOAP Action header then wait for HTTP OK/Accept response, returns SOAP_OK or error code
        virtual int set_interface_ip_address(const std::string& name, const std::string& ip_address, const std::string& subnet_mask) { return this->set_interface_ip_address(NULL, NULL, name, ip_address, subnet_mask); }
        /// Web service one-way synchronous send operation 'set-interface-ip-address' to the specified endpoint and SOAP Action header then wait for HTTP OK/Accept response, returns SOAP_OK or error code
        virtual int set_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name, const std::string& ip_address, const std::string& subnet_mask) { return (this->send_set_interface_ip_address(soap_endpoint_url, soap_action, name, ip_address, subnet_mask) || soap_recv_empty_response(this->soap)) ? this->soap->error : SOAP_OK; }
        /// Web service one-way asynchronous send operation 'send_set-interface-ip-address' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int send_set_interface_ip_address(const std::string& name, const std::string& ip_address, const std::string& subnet_mask) { return this->send_set_interface_ip_address(NULL, NULL, name, ip_address, subnet_mask); }
        /// Web service one-way asynchronous send operation 'send_set-interface-ip-address' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_set_interface_ip_address(const char *soap_endpoint_url, const char *soap_action, const std::string& name, const std::string& ip_address, const std::string& subnet_mask);
        /// Web service one-way asynchronous receive operation 'recv_set-interface-ip-address', returns SOAP_OK or error code;
        virtual int recv_set_interface_ip_address(struct ns__set_interface_ip_address&);
        /// Web service asynchronous receive of HTTP Accept acknowledgment for one-way asynchronous send operation 'send_set-interface-ip-address', returns SOAP_OK or error code
        virtual int recv_set_interface_ip_address_empty_response() { return soap_recv_empty_response(this->soap); }
    };
#endif
